
seminarski_rad_urs_ktm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005348  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005518  08005518  00006518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005580  08005580  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005580  08005580  00006580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005588  08005588  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005588  08005588  00006588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800558c  0800558c  0000658c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005590  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000005c  080055ec  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080055ec  000072c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3f2  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa4  00000000  00000000  0001447e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00016428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9c  00000000  00000000  000171b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022131  00000000  00000000  00017c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f00  00000000  00000000  00039d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0e4a  00000000  00000000  0004ac85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011bacf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f68  00000000  00000000  0011bb14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0011fa7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005500 	.word	0x08005500

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08005500 	.word	0x08005500

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <lcd__cmd>:

#define SLAVE_ADDRESS_LCD 0x4E    // Definira adresu slave uređaja (LCD) na I2C sabirnici.

// Funkcija za slanje komande LCD-u.
void lcd__cmd (char cmd)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xf0);
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f023 030f 	bic.w	r3, r3, #15
 8000d8c:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xf0);
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	011b      	lsls	r3, r3, #4
 8000d92:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0C;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	f043 030c 	orr.w	r3, r3, #12
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08;
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	f043 0308 	orr.w	r3, r3, #8
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C;
 8000da8:	7bbb      	ldrb	r3, [r7, #14]
 8000daa:	f043 030c 	orr.w	r3, r3, #12
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08;
 8000db2:	7bbb      	ldrb	r3, [r7, #14]
 8000db4:	f043 0308 	orr.w	r3, r3, #8
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000dbc:	f107 0208 	add.w	r2, r7, #8
 8000dc0:	2364      	movs	r3, #100	@ 0x64
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	214e      	movs	r1, #78	@ 0x4e
 8000dc8:	4803      	ldr	r0, [pc, #12]	@ (8000dd8 <lcd__cmd+0x5c>)
 8000dca:	f001 fa51 	bl	8002270 <HAL_I2C_Master_Transmit>
}
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000078 	.word	0x20000078

08000ddc <lcd__data>:

// Funkcija za slanje podataka LCD-u.
void lcd__data (char data)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af02      	add	r7, sp, #8
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data & 0xf0);
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f023 030f 	bic.w	r3, r3, #15
 8000dec:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xf0);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	011b      	lsls	r3, r3, #4
 8000df2:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0D;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	f043 030d 	orr.w	r3, r3, #13
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	f043 0309 	orr.w	r3, r3, #9
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;
 8000e08:	7bbb      	ldrb	r3, [r7, #14]
 8000e0a:	f043 030d 	orr.w	r3, r3, #13
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;
 8000e12:	7bbb      	ldrb	r3, [r7, #14]
 8000e14:	f043 0309 	orr.w	r3, r3, #9
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000e1c:	f107 0208 	add.w	r2, r7, #8
 8000e20:	2364      	movs	r3, #100	@ 0x64
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2304      	movs	r3, #4
 8000e26:	214e      	movs	r1, #78	@ 0x4e
 8000e28:	4803      	ldr	r0, [pc, #12]	@ (8000e38 <lcd__data+0x5c>)
 8000e2a:	f001 fa21 	bl	8002270 <HAL_I2C_Master_Transmit>
}
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000078 	.word	0x20000078

08000e3c <lcd_clear>:

// Funkcija za čišćenje LCD zaslona.
void lcd_clear (void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
    lcd__cmd (0x01);
 8000e40:	2001      	movs	r0, #1
 8000e42:	f7ff ff9b 	bl	8000d7c <lcd__cmd>
    HAL_Delay(2);
 8000e46:	2002      	movs	r0, #2
 8000e48:	f000 fdea 	bl	8001a20 <HAL_Delay>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <lcd_put_cur>:

// Funkcija za postavljanje kursora na određenu poziciju na LCD zaslonu.
void lcd_put_cur(int row, int col)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
    switch (row)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <lcd_put_cur+0x18>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d005      	beq.n	8000e72 <lcd_put_cur+0x22>
 8000e66:	e009      	b.n	8000e7c <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e6e:	603b      	str	r3, [r7, #0]
            break;
 8000e70:	e004      	b.n	8000e7c <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000e78:	603b      	str	r3, [r7, #0]
            break;
 8000e7a:	bf00      	nop
    }

    lcd__cmd(col);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff7b 	bl	8000d7c <lcd__cmd>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <lcd_init>:

// Funkcija za inicijalizaciju LCD zaslona.
void lcd_init (void)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8000e92:	2032      	movs	r0, #50	@ 0x32
 8000e94:	f000 fdc4 	bl	8001a20 <HAL_Delay>
    lcd__cmd(0x30);
 8000e98:	2030      	movs	r0, #48	@ 0x30
 8000e9a:	f7ff ff6f 	bl	8000d7c <lcd__cmd>
    HAL_Delay(5);
 8000e9e:	2005      	movs	r0, #5
 8000ea0:	f000 fdbe 	bl	8001a20 <HAL_Delay>
    lcd__cmd(0x30);
 8000ea4:	2030      	movs	r0, #48	@ 0x30
 8000ea6:	f7ff ff69 	bl	8000d7c <lcd__cmd>
    HAL_Delay(1);
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f000 fdb8 	bl	8001a20 <HAL_Delay>
    lcd__cmd(0x30);
 8000eb0:	2030      	movs	r0, #48	@ 0x30
 8000eb2:	f7ff ff63 	bl	8000d7c <lcd__cmd>
    HAL_Delay(10);
 8000eb6:	200a      	movs	r0, #10
 8000eb8:	f000 fdb2 	bl	8001a20 <HAL_Delay>
    lcd__cmd(0x20);
 8000ebc:	2020      	movs	r0, #32
 8000ebe:	f7ff ff5d 	bl	8000d7c <lcd__cmd>
    HAL_Delay(10);
 8000ec2:	200a      	movs	r0, #10
 8000ec4:	f000 fdac 	bl	8001a20 <HAL_Delay>

    // Postavlja LCD parametre.
    lcd__cmd(0x28);
 8000ec8:	2028      	movs	r0, #40	@ 0x28
 8000eca:	f7ff ff57 	bl	8000d7c <lcd__cmd>
    HAL_Delay(1);
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f000 fda6 	bl	8001a20 <HAL_Delay>
    lcd__cmd(0x08);
 8000ed4:	2008      	movs	r0, #8
 8000ed6:	f7ff ff51 	bl	8000d7c <lcd__cmd>
    HAL_Delay(1);
 8000eda:	2001      	movs	r0, #1
 8000edc:	f000 fda0 	bl	8001a20 <HAL_Delay>
    lcd__cmd(0x01);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f7ff ff4b 	bl	8000d7c <lcd__cmd>
    HAL_Delay(2);
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f000 fd9a 	bl	8001a20 <HAL_Delay>
    lcd__cmd(0x06);
 8000eec:	2006      	movs	r0, #6
 8000eee:	f7ff ff45 	bl	8000d7c <lcd__cmd>
    HAL_Delay(1);
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f000 fd94 	bl	8001a20 <HAL_Delay>
    lcd__cmd(0x0C);
 8000ef8:	200c      	movs	r0, #12
 8000efa:	f7ff ff3f 	bl	8000d7c <lcd__cmd>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <lcd__string>:

// Funkcija za prikazivanje stringa na LCD zaslonu.
void lcd__string (char *str)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
    while (*str) lcd__data (*str++);
 8000f0a:	e006      	b.n	8000f1a <lcd__string+0x18>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff61 	bl	8000ddc <lcd__data>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1f4      	bne.n	8000f0c <lcd__string+0xa>
}
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <lcd_print_distance>:

// Funkcija za prikazivanje udaljenosti na LCD zaslonu.
void lcd_print_distance(uint32_t Distance)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
    char buf[16];
    lcd_put_cur(0, 0);
 8000f34:	2100      	movs	r1, #0
 8000f36:	2000      	movs	r0, #0
 8000f38:	f7ff ff8a 	bl	8000e50 <lcd_put_cur>
    lcd__string(" Udaljenost je");
 8000f3c:	480b      	ldr	r0, [pc, #44]	@ (8000f6c <lcd_print_distance+0x40>)
 8000f3e:	f7ff ffe0 	bl	8000f02 <lcd__string>
    lcd_put_cur(1, 4);
 8000f42:	2104      	movs	r1, #4
 8000f44:	2001      	movs	r0, #1
 8000f46:	f7ff ff83 	bl	8000e50 <lcd_put_cur>
    sprintf(buf, " %3lu cm", Distance);
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	4907      	ldr	r1, [pc, #28]	@ (8000f70 <lcd_print_distance+0x44>)
 8000f52:	4618      	mov	r0, r3
 8000f54:	f003 fe34 	bl	8004bc0 <siprintf>

    lcd__string(buf);
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ffd0 	bl	8000f02 <lcd__string>
}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	08005518 	.word	0x08005518
 8000f70:	08005528 	.word	0x08005528
 8000f74:	00000000 	.word	0x00000000

08000f78 <HAL_TIM_IC_CaptureCallback>:



// Funkcija za obradu uhvata tajmera (poziva se kad se dogodi uhvat)
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	7f1b      	ldrb	r3, [r3, #28]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d17d      	bne.n	8001084 <HAL_TIM_IC_CaptureCallback+0x10c>
    {
        if (Captured == 0)
 8000f88:	4b43      	ldr	r3, [pc, #268]	@ (8001098 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d11a      	bne.n	8000fc6 <HAL_TIM_IC_CaptureCallback+0x4e>
        {
        	 // Čitanje vrijednosti prvog uhvata tajmera
            Value_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f90:	2100      	movs	r1, #0
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f003 f8d2 	bl	800413c <HAL_TIM_ReadCapturedValue>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4a40      	ldr	r2, [pc, #256]	@ (800109c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f9c:	6013      	str	r3, [r2, #0]
            Captured = 1;
 8000f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8001098 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
            // Postavljanje polariteta na padajući rub (sljedeći uhvat će biti na rastućem rubu)
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6a1a      	ldr	r2, [r3, #32]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 020a 	bic.w	r2, r2, #10
 8000fb2:	621a      	str	r2, [r3, #32]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6a1a      	ldr	r2, [r3, #32]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0202 	orr.w	r2, r2, #2
 8000fc2:	621a      	str	r2, [r3, #32]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
            // Onemogućavanje prekida za Channel 1 (TIM_IT_CC1)
            __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
        }
    }
}
 8000fc4:	e05e      	b.n	8001084 <HAL_TIM_IC_CaptureCallback+0x10c>
        else if (Captured == 1)
 8000fc6:	4b34      	ldr	r3, [pc, #208]	@ (8001098 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d15a      	bne.n	8001084 <HAL_TIM_IC_CaptureCallback+0x10c>
            Value_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000fce:	2100      	movs	r1, #0
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f003 f8b3 	bl	800413c <HAL_TIM_ReadCapturedValue>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a31      	ldr	r2, [pc, #196]	@ (80010a0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fda:	6013      	str	r3, [r2, #0]
            if (Value_2 > Value_1)
 8000fdc:	4b30      	ldr	r3, [pc, #192]	@ (80010a0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800109c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d907      	bls.n	8000ff8 <HAL_TIM_IC_CaptureCallback+0x80>
                Difference = Value_2 - Value_1;
 8000fe8:	4b2d      	ldr	r3, [pc, #180]	@ (80010a0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b2b      	ldr	r3, [pc, #172]	@ (800109c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	4a2c      	ldr	r2, [pc, #176]	@ (80010a4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e009      	b.n	800100c <HAL_TIM_IC_CaptureCallback+0x94>
                Difference = (0xFFFF - Value_1) + Value_2;
 8000ff8:	4b29      	ldr	r3, [pc, #164]	@ (80010a0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b27      	ldr	r3, [pc, #156]	@ (800109c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001006:	33ff      	adds	r3, #255	@ 0xff
 8001008:	4a26      	ldr	r2, [pc, #152]	@ (80010a4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800100a:	6013      	str	r3, [r2, #0]
          Distance = (float)Difference * 0.0343/ 2.0;
 800100c:	4b25      	ldr	r3, [pc, #148]	@ (80010a4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	ee07 3a90 	vmov	s15, r3
 8001014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001018:	ee17 0a90 	vmov	r0, s15
 800101c:	f7ff faac 	bl	8000578 <__aeabi_f2d>
 8001020:	a31b      	add	r3, pc, #108	@ (adr r3, 8001090 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff faff 	bl	8000628 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800103a:	f7ff fc1f 	bl	800087c <__aeabi_ddiv>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f7ff fd01 	bl	8000a4c <__aeabi_d2uiz>
 800104a:	4603      	mov	r3, r0
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001050:	701a      	strb	r2, [r3, #0]
              Captured = 0;
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6a1a      	ldr	r2, [r3, #32]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 020a 	bic.w	r2, r2, #10
 8001066:	621a      	str	r2, [r3, #32]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6a12      	ldr	r2, [r2, #32]
 8001072:	621a      	str	r2, [r3, #32]
            __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	68da      	ldr	r2, [r3, #12]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0202 	bic.w	r2, r2, #2
 8001082:	60da      	str	r2, [r3, #12]
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	f3af 8000 	nop.w
 8001090:	04816f00 	.word	0x04816f00
 8001094:	3fa18fc5 	.word	0x3fa18fc5
 8001098:	20000168 	.word	0x20000168
 800109c:	2000015c 	.word	0x2000015c
 80010a0:	20000160 	.word	0x20000160
 80010a4:	20000164 	.word	0x20000164
 80010a8:	20000169 	.word	0x20000169

080010ac <delay>:

// Funkcija za kašnjenje
void delay (uint16_t time)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80010b6:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <delay+0x30>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 80010be:	bf00      	nop
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <delay+0x30>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d3f9      	bcc.n	80010c0 <delay+0x14>
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	200000cc 	.word	0x200000cc

080010e0 <HCSR04_Read>:

// Funkcija za čitanje HC-SR04 senzora
void HCSR04_Read(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010ea:	480b      	ldr	r0, [pc, #44]	@ (8001118 <HCSR04_Read+0x38>)
 80010ec:	f000 ff62 	bl	8001fb4 <HAL_GPIO_WritePin>
    delay(10);
 80010f0:	200a      	movs	r0, #10
 80010f2:	f7ff ffdb 	bl	80010ac <delay>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010fc:	4806      	ldr	r0, [pc, #24]	@ (8001118 <HCSR04_Read+0x38>)
 80010fe:	f000 ff59 	bl	8001fb4 <HAL_GPIO_WritePin>

    __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001102:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HCSR04_Read+0x3c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <HCSR04_Read+0x3c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f042 0202 	orr.w	r2, r2, #2
 8001110:	60da      	str	r2, [r3, #12]
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40020000 	.word	0x40020000
 800111c:	200000cc 	.word	0x200000cc

08001120 <main>:
// Glavna funkcija
int main(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
    HAL_Init();
 8001126:	f000 fc09 	bl	800193c <HAL_Init>
    SystemClock_Config();
 800112a:	f000 f87f 	bl	800122c <SystemClock_Config>
    MX_GPIO_Init();
 800112e:	f000 f9e7 	bl	8001500 <MX_GPIO_Init>
    MX_TIM1_Init();
 8001132:	f000 f91b 	bl	800136c <MX_TIM1_Init>
    MX_I2C1_Init();
 8001136:	f000 f8eb 	bl	8001310 <MX_I2C1_Init>
    MX_TIM2_Init();
 800113a:	f000 f96d 	bl	8001418 <MX_TIM2_Init>

    lcd_init();
 800113e:	f7ff fea6 	bl	8000e8e <lcd_init>
    // Pokretanje tajmera 1 u režimu uhvata sa prekidima za Channel 1
    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001142:	2100      	movs	r1, #0
 8001144:	4833      	ldr	r0, [pc, #204]	@ (8001214 <main+0xf4>)
 8001146:	f002 fbbb 	bl	80038c0 <HAL_TIM_IC_Start_IT>
    // Pokretanje PWM signala na tajmeru 2, Channel 2
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800114a:	2104      	movs	r1, #4
 800114c:	4832      	ldr	r0, [pc, #200]	@ (8001218 <main+0xf8>)
 800114e:	f002 fa2f 	bl	80035b0 <HAL_TIM_PWM_Start>

    uint32_t current_time = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]

    while (1)
    {
    	 // Čitanje podataka s HC-SR04 senzora
        HCSR04_Read();
 8001156:	f7ff ffc3 	bl	80010e0 <HCSR04_Read>
        lcd_clear();
 800115a:	f7ff fe6f 	bl	8000e3c <lcd_clear>
        // Ispisivanje izmjerene udaljenosti na LCD-u
        lcd_print_distance(Distance);
 800115e:	4b2f      	ldr	r3, [pc, #188]	@ (800121c <main+0xfc>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fee2 	bl	8000f2c <lcd_print_distance>
        HAL_Delay(200);
 8001168:	20c8      	movs	r0, #200	@ 0xc8
 800116a:	f000 fc59 	bl	8001a20 <HAL_Delay>

        // Čitanje trenutnog vremena
        current_time = HAL_GetTick();
 800116e:	f000 fc4b 	bl	8001a08 <HAL_GetTick>
 8001172:	6078      	str	r0, [r7, #4]

        // Postavljanje periode za uključivanje/isključivanje buzzer-a na temelju udaljenosti
        if (Distance < 10)
 8001174:	4b29      	ldr	r3, [pc, #164]	@ (800121c <main+0xfc>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b09      	cmp	r3, #9
 800117a:	d803      	bhi.n	8001184 <main+0x64>
        {
            Buzzer = 100;
 800117c:	4b28      	ldr	r3, [pc, #160]	@ (8001220 <main+0x100>)
 800117e:	2264      	movs	r2, #100	@ 0x64
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e013      	b.n	80011ac <main+0x8c>
        }
        else if (Distance < 20 )
 8001184:	4b25      	ldr	r3, [pc, #148]	@ (800121c <main+0xfc>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b13      	cmp	r3, #19
 800118a:	d803      	bhi.n	8001194 <main+0x74>
        {
            Buzzer = 250;
 800118c:	4b24      	ldr	r3, [pc, #144]	@ (8001220 <main+0x100>)
 800118e:	22fa      	movs	r2, #250	@ 0xfa
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	e00b      	b.n	80011ac <main+0x8c>
        }
        else if (Distance < 30)
 8001194:	4b21      	ldr	r3, [pc, #132]	@ (800121c <main+0xfc>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b1d      	cmp	r3, #29
 800119a:	d804      	bhi.n	80011a6 <main+0x86>
        {
            Buzzer = 500;
 800119c:	4b20      	ldr	r3, [pc, #128]	@ (8001220 <main+0x100>)
 800119e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	e002      	b.n	80011ac <main+0x8c>
        }
        else
        {
            Buzzer = 0;
 80011a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001220 <main+0x100>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
        }

        // Upravljanje buzzer-om na temelju vremena i izmjerene udaljenosti
        if (Buzzer > 0)
 80011ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <main+0x100>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d027      	beq.n	8001204 <main+0xe4>
        {
            if (current_time - last_toggle_time >= Buzzer)
 80011b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <main+0x104>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	1ad2      	subs	r2, r2, r3
 80011bc:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <main+0x100>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d3c8      	bcc.n	8001156 <main+0x36>
            {
                if (Buzzer_On)
 80011c4:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <main+0x108>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d004      	beq.n	80011d6 <main+0xb6>
                {
                	 // Isključivanje PWM signala na tajmeru 2, Channel 2
                    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80011cc:	2104      	movs	r1, #4
 80011ce:	4812      	ldr	r0, [pc, #72]	@ (8001218 <main+0xf8>)
 80011d0:	f002 fab6 	bl	8003740 <HAL_TIM_PWM_Stop>
 80011d4:	e008      	b.n	80011e8 <main+0xc8>
                }
                else
                {
                	 // Postavljanje duty ciklusa PWM signala na tajmeru 2, Channel 2 na 50%
                    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 500);
 80011d6:	4b10      	ldr	r3, [pc, #64]	@ (8001218 <main+0xf8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80011de:	639a      	str	r2, [r3, #56]	@ 0x38
                    // Pokretanje PWM signala na tajmeru 2, Channel 2
                    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011e0:	2104      	movs	r1, #4
 80011e2:	480d      	ldr	r0, [pc, #52]	@ (8001218 <main+0xf8>)
 80011e4:	f002 f9e4 	bl	80035b0 <HAL_TIM_PWM_Start>
                }
                // Promjena stanja buzzer-a
                Buzzer_On = !Buzzer_On;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <main+0x108>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	bf0c      	ite	eq
 80011f0:	2301      	moveq	r3, #1
 80011f2:	2300      	movne	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <main+0x108>)
 80011fa:	701a      	strb	r2, [r3, #0]
                // Ažuriranje vremena zadnje promjene stanja buzzer-a
                last_toggle_time = current_time;
 80011fc:	4a09      	ldr	r2, [pc, #36]	@ (8001224 <main+0x104>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e7a8      	b.n	8001156 <main+0x36>
            }
        }
        else
        {
        	 // Isključivanje PWM signala na tajmeru 2, Channel 2
                HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001204:	2104      	movs	r1, #4
 8001206:	4804      	ldr	r0, [pc, #16]	@ (8001218 <main+0xf8>)
 8001208:	f002 fa9a 	bl	8003740 <HAL_TIM_PWM_Stop>
                // Postavljanje stanja buzzer-a na isključeno
                Buzzer_On = 0;
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <main+0x108>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
        HCSR04_Read();
 8001212:	e7a0      	b.n	8001156 <main+0x36>
 8001214:	200000cc 	.word	0x200000cc
 8001218:	20000114 	.word	0x20000114
 800121c:	20000169 	.word	0x20000169
 8001220:	20000174 	.word	0x20000174
 8001224:	2000016c 	.word	0x2000016c
 8001228:	20000170 	.word	0x20000170

0800122c <SystemClock_Config>:
    }
}


void SystemClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b094      	sub	sp, #80	@ 0x50
 8001230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	2234      	movs	r2, #52	@ 0x34
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f003 fce0 	bl	8004c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001240:	f107 0308 	add.w	r3, r7, #8
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	4b2c      	ldr	r3, [pc, #176]	@ (8001308 <SystemClock_Config+0xdc>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001258:	4a2b      	ldr	r2, [pc, #172]	@ (8001308 <SystemClock_Config+0xdc>)
 800125a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800125e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001260:	4b29      	ldr	r3, [pc, #164]	@ (8001308 <SystemClock_Config+0xdc>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001264:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800126c:	2300      	movs	r3, #0
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	4b26      	ldr	r3, [pc, #152]	@ (800130c <SystemClock_Config+0xe0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a25      	ldr	r2, [pc, #148]	@ (800130c <SystemClock_Config+0xe0>)
 8001276:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b23      	ldr	r3, [pc, #140]	@ (800130c <SystemClock_Config+0xe0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001288:	2302      	movs	r3, #2
 800128a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001290:	2310      	movs	r3, #16
 8001292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001294:	2302      	movs	r3, #2
 8001296:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001298:	2300      	movs	r3, #0
 800129a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800129c:	2308      	movs	r3, #8
 800129e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012a0:	23b4      	movs	r3, #180	@ 0xb4
 80012a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012ac:	2302      	movs	r3, #2
 80012ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4618      	mov	r0, r3
 80012b6:	f001 fe35 	bl	8002f24 <HAL_RCC_OscConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012c0:	f000 f970 	bl	80015a4 <Error_Handler>
  }


  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012c4:	f001 fb2e 	bl	8002924 <HAL_PWREx_EnableOverDrive>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012ce:	f000 f969 	bl	80015a4 <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d2:	230f      	movs	r3, #15
 80012d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80012d6:	2303      	movs	r3, #3
 80012d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012de:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	2105      	movs	r1, #5
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 fb67 	bl	80029c4 <HAL_RCC_ClockConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80012fc:	f000 f952 	bl	80015a4 <Error_Handler>
  }
}
 8001300:	bf00      	nop
 8001302:	3750      	adds	r7, #80	@ 0x50
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40007000 	.word	0x40007000

08001310 <MX_I2C1_Init>:


static void MX_I2C1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001316:	4a13      	ldr	r2, [pc, #76]	@ (8001364 <MX_I2C1_Init+0x54>)
 8001318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <MX_I2C1_Init+0x50>)
 800131c:	4a12      	ldr	r2, [pc, #72]	@ (8001368 <MX_I2C1_Init+0x58>)
 800131e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001320:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001326:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132c:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <MX_I2C1_Init+0x50>)
 800132e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001332:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001334:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800133a:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <MX_I2C1_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001340:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001346:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	@ (8001360 <MX_I2C1_Init+0x50>)
 800134e:	f000 fe4b 	bl	8001fe8 <HAL_I2C_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001358:	f000 f924 	bl	80015a4 <Error_Handler>
  }

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000078 	.word	0x20000078
 8001364:	40005400 	.word	0x40005400
 8001368:	000186a0 	.word	0x000186a0

0800136c <MX_TIM1_Init>:


static void MX_TIM1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0



  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800137c:	463b      	mov	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]

  htim1.Instance = TIM1;
 8001388:	4b21      	ldr	r3, [pc, #132]	@ (8001410 <MX_TIM1_Init+0xa4>)
 800138a:	4a22      	ldr	r2, [pc, #136]	@ (8001414 <MX_TIM1_Init+0xa8>)
 800138c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 800138e:	4b20      	ldr	r3, [pc, #128]	@ (8001410 <MX_TIM1_Init+0xa4>)
 8001390:	22b3      	movs	r2, #179	@ 0xb3
 8001392:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001394:	4b1e      	ldr	r3, [pc, #120]	@ (8001410 <MX_TIM1_Init+0xa4>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF;
 800139a:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <MX_TIM1_Init+0xa4>)
 800139c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <MX_TIM1_Init+0xa4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a8:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <MX_TIM1_Init+0xa4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ae:	4b18      	ldr	r3, [pc, #96]	@ (8001410 <MX_TIM1_Init+0xa4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80013b4:	4816      	ldr	r0, [pc, #88]	@ (8001410 <MX_TIM1_Init+0xa4>)
 80013b6:	f002 fa33 	bl	8003820 <HAL_TIM_IC_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80013c0:	f000 f8f0 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4619      	mov	r1, r3
 80013d2:	480f      	ldr	r0, [pc, #60]	@ (8001410 <MX_TIM1_Init+0xa4>)
 80013d4:	f003 fb64 	bl	8004aa0 <HAL_TIMEx_MasterConfigSynchronization>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80013de:	f000 f8e1 	bl	80015a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013e2:	2300      	movs	r3, #0
 80013e4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013e6:	2301      	movs	r3, #1
 80013e8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013f2:	463b      	mov	r3, r7
 80013f4:	2200      	movs	r2, #0
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	@ (8001410 <MX_TIM1_Init+0xa4>)
 80013fa:	f002 fc79 	bl	8003cf0 <HAL_TIM_IC_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001404:	f000 f8ce 	bl	80015a4 <Error_Handler>
  }


}
 8001408:	bf00      	nop
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200000cc 	.word	0x200000cc
 8001414:	40010000 	.word	0x40010000

08001418 <MX_TIM2_Init>:


static void MX_TIM2_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08e      	sub	sp, #56	@ 0x38
 800141c:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142c:	f107 0320 	add.w	r3, r7, #32
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
 8001444:	615a      	str	r2, [r3, #20]
 8001446:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001448:	4b2c      	ldr	r3, [pc, #176]	@ (80014fc <MX_TIM2_Init+0xe4>)
 800144a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800144e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90;
 8001450:	4b2a      	ldr	r3, [pc, #168]	@ (80014fc <MX_TIM2_Init+0xe4>)
 8001452:	225a      	movs	r2, #90	@ 0x5a
 8001454:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001456:	4b29      	ldr	r3, [pc, #164]	@ (80014fc <MX_TIM2_Init+0xe4>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 45;
 800145c:	4b27      	ldr	r3, [pc, #156]	@ (80014fc <MX_TIM2_Init+0xe4>)
 800145e:	222d      	movs	r2, #45	@ 0x2d
 8001460:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001462:	4b26      	ldr	r3, [pc, #152]	@ (80014fc <MX_TIM2_Init+0xe4>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001468:	4b24      	ldr	r3, [pc, #144]	@ (80014fc <MX_TIM2_Init+0xe4>)
 800146a:	2200      	movs	r2, #0
 800146c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800146e:	4823      	ldr	r0, [pc, #140]	@ (80014fc <MX_TIM2_Init+0xe4>)
 8001470:	f001 fff6 	bl	8003460 <HAL_TIM_Base_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800147a:	f000 f893 	bl	80015a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001482:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001484:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001488:	4619      	mov	r1, r3
 800148a:	481c      	ldr	r0, [pc, #112]	@ (80014fc <MX_TIM2_Init+0xe4>)
 800148c:	f002 fd8e 	bl	8003fac <HAL_TIM_ConfigClockSource>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001496:	f000 f885 	bl	80015a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800149a:	4818      	ldr	r0, [pc, #96]	@ (80014fc <MX_TIM2_Init+0xe4>)
 800149c:	f002 f82f 	bl	80034fe <HAL_TIM_PWM_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80014a6:	f000 f87d 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014b2:	f107 0320 	add.w	r3, r7, #32
 80014b6:	4619      	mov	r1, r3
 80014b8:	4810      	ldr	r0, [pc, #64]	@ (80014fc <MX_TIM2_Init+0xe4>)
 80014ba:	f003 faf1 	bl	8004aa0 <HAL_TIMEx_MasterConfigSynchronization>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80014c4:	f000 f86e 	bl	80015a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c8:	2360      	movs	r3, #96	@ 0x60
 80014ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2204      	movs	r2, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4807      	ldr	r0, [pc, #28]	@ (80014fc <MX_TIM2_Init+0xe4>)
 80014e0:	f002 fca2 	bl	8003e28 <HAL_TIM_PWM_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80014ea:	f000 f85b 	bl	80015a4 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 80014ee:	4803      	ldr	r0, [pc, #12]	@ (80014fc <MX_TIM2_Init+0xe4>)
 80014f0:	f000 f940 	bl	8001774 <HAL_TIM_MspPostInit>

}
 80014f4:	bf00      	nop
 80014f6:	3738      	adds	r7, #56	@ 0x38
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000114 	.word	0x20000114

08001500 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]


  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b20      	ldr	r3, [pc, #128]	@ (800159c <MX_GPIO_Init+0x9c>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	4a1f      	ldr	r2, [pc, #124]	@ (800159c <MX_GPIO_Init+0x9c>)
 8001520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001524:	6313      	str	r3, [r2, #48]	@ 0x30
 8001526:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <MX_GPIO_Init+0x9c>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b19      	ldr	r3, [pc, #100]	@ (800159c <MX_GPIO_Init+0x9c>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a18      	ldr	r2, [pc, #96]	@ (800159c <MX_GPIO_Init+0x9c>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b16      	ldr	r3, [pc, #88]	@ (800159c <MX_GPIO_Init+0x9c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	4b12      	ldr	r3, [pc, #72]	@ (800159c <MX_GPIO_Init+0x9c>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a11      	ldr	r2, [pc, #68]	@ (800159c <MX_GPIO_Init+0x9c>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <MX_GPIO_Init+0x9c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001570:	480b      	ldr	r0, [pc, #44]	@ (80015a0 <MX_GPIO_Init+0xa0>)
 8001572:	f000 fd1f 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001576:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800157a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	4619      	mov	r1, r3
 800158e:	4804      	ldr	r0, [pc, #16]	@ (80015a0 <MX_GPIO_Init+0xa0>)
 8001590:	f000 fb7c 	bl	8001c8c <HAL_GPIO_Init>


}
 8001594:	bf00      	nop
 8001596:	3720      	adds	r7, #32
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020000 	.word	0x40020000

080015a4 <Error_Handler>:


void Error_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_MspInit>:


void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

void HAL_MspInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0



  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <HAL_MspInit+0x4c>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001600 <HAL_MspInit+0x4c>)
 80015c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001600 <HAL_MspInit+0x4c>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <HAL_MspInit+0x4c>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	4a08      	ldr	r2, [pc, #32]	@ (8001600 <HAL_MspInit+0x4c>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e6:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <HAL_MspInit+0x4c>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]


}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800

08001604 <HAL_I2C_MspInit>:


void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	@ 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a19      	ldr	r2, [pc, #100]	@ (8001688 <HAL_I2C_MspInit+0x84>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d12b      	bne.n	800167e <HAL_I2C_MspInit+0x7a>
  {

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	4b18      	ldr	r3, [pc, #96]	@ (800168c <HAL_I2C_MspInit+0x88>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a17      	ldr	r2, [pc, #92]	@ (800168c <HAL_I2C_MspInit+0x88>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <HAL_I2C_MspInit+0x88>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001642:	23c0      	movs	r3, #192	@ 0xc0
 8001644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001646:	2312      	movs	r3, #18
 8001648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001652:	2304      	movs	r3, #4
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	480c      	ldr	r0, [pc, #48]	@ (8001690 <HAL_I2C_MspInit+0x8c>)
 800165e:	f000 fb15 	bl	8001c8c <HAL_GPIO_Init>


    __HAL_RCC_I2C1_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b09      	ldr	r3, [pc, #36]	@ (800168c <HAL_I2C_MspInit+0x88>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	4a08      	ldr	r2, [pc, #32]	@ (800168c <HAL_I2C_MspInit+0x88>)
 800166c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001670:	6413      	str	r3, [r2, #64]	@ 0x40
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <HAL_I2C_MspInit+0x88>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]

  }

}
 800167e:	bf00      	nop
 8001680:	3728      	adds	r7, #40	@ 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40005400 	.word	0x40005400
 800168c:	40023800 	.word	0x40023800
 8001690:	40020400 	.word	0x40020400

08001694 <HAL_TIM_IC_MspInit>:

}


void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	@ 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001728 <HAL_TIM_IC_MspInit+0x94>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d134      	bne.n	8001720 <HAL_TIM_IC_MspInit+0x8c>
  {

    __HAL_RCC_TIM1_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	4b1c      	ldr	r3, [pc, #112]	@ (800172c <HAL_TIM_IC_MspInit+0x98>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016be:	4a1b      	ldr	r2, [pc, #108]	@ (800172c <HAL_TIM_IC_MspInit+0x98>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016c6:	4b19      	ldr	r3, [pc, #100]	@ (800172c <HAL_TIM_IC_MspInit+0x98>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b15      	ldr	r3, [pc, #84]	@ (800172c <HAL_TIM_IC_MspInit+0x98>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	4a14      	ldr	r2, [pc, #80]	@ (800172c <HAL_TIM_IC_MspInit+0x98>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e2:	4b12      	ldr	r3, [pc, #72]	@ (800172c <HAL_TIM_IC_MspInit+0x98>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001700:	2301      	movs	r3, #1
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	4809      	ldr	r0, [pc, #36]	@ (8001730 <HAL_TIM_IC_MspInit+0x9c>)
 800170c:	f000 fabe 	bl	8001c8c <HAL_GPIO_Init>


    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	201b      	movs	r0, #27
 8001716:	f000 fa82 	bl	8001c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800171a:	201b      	movs	r0, #27
 800171c:	f000 fa9b 	bl	8001c56 <HAL_NVIC_EnableIRQ>

  }

}
 8001720:	bf00      	nop
 8001722:	3728      	adds	r7, #40	@ 0x28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40010000 	.word	0x40010000
 800172c:	40023800 	.word	0x40023800
 8001730:	40020000 	.word	0x40020000

08001734 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001744:	d10d      	bne.n	8001762 <HAL_TIM_Base_MspInit+0x2e>
  {

    __HAL_RCC_TIM2_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <HAL_TIM_Base_MspInit+0x3c>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	4a08      	ldr	r2, [pc, #32]	@ (8001770 <HAL_TIM_Base_MspInit+0x3c>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6413      	str	r3, [r2, #64]	@ 0x40
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_TIM_Base_MspInit+0x3c>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]

  }

}
 8001762:	bf00      	nop
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001794:	d11d      	bne.n	80017d2 <HAL_TIM_MspPostInit+0x5e>
  {


    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <HAL_TIM_MspPostInit+0x68>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a0f      	ldr	r2, [pc, #60]	@ (80017dc <HAL_TIM_MspPostInit+0x68>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b0d      	ldr	r3, [pc, #52]	@ (80017dc <HAL_TIM_MspPostInit+0x68>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017b2:	2302      	movs	r3, #2
 80017b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017c2:	2301      	movs	r3, #1
 80017c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	4619      	mov	r1, r3
 80017cc:	4804      	ldr	r0, [pc, #16]	@ (80017e0 <HAL_TIM_MspPostInit+0x6c>)
 80017ce:	f000 fa5d 	bl	8001c8c <HAL_GPIO_Init>


  }

}
 80017d2:	bf00      	nop
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020000 	.word	0x40020000

080017e4 <NMI_Handler>:
#include "stm32f4xx_it.h"

extern TIM_HandleTypeDef htim1;

void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

   while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <NMI_Handler+0x4>

080017ec <HardFault_Handler>:

}


void HardFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

  }
}

void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <MemManage_Handler+0x4>

080017fc <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

  }
}

void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
   while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <UsageFault_Handler+0x4>

0800180c <SVC_Handler>:
   }
}


void SVC_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <PendSV_Handler>:


void PendSV_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	af00      	add	r7, sp, #0

  HAL_IncTick();
 800183a:	f000 f8d1 	bl	80019e0 <HAL_IncTick>

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <TIM1_CC_IRQHandler>:

void TIM1_CC_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0

  HAL_TIM_IRQHandler(&htim1);
 8001848:	4802      	ldr	r0, [pc, #8]	@ (8001854 <TIM1_CC_IRQHandler+0x10>)
 800184a:	f002 f961 	bl	8003b10 <HAL_TIM_IRQHandler>

}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200000cc 	.word	0x200000cc

08001858 <_sbrk>:

static uint8_t *__sbrk_heap_end = NULL;


void *_sbrk(ptrdiff_t incr)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001860:	4a14      	ldr	r2, [pc, #80]	@ (80018b4 <_sbrk+0x5c>)
 8001862:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <_sbrk+0x60>)
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800186c:	4b13      	ldr	r3, [pc, #76]	@ (80018bc <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001874:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <_sbrk+0x64>)
 8001876:	4a12      	ldr	r2, [pc, #72]	@ (80018c0 <_sbrk+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187a:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	d207      	bcs.n	8001898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001888:	f003 f9c2 	bl	8004c10 <__errno>
 800188c:	4603      	mov	r3, r0
 800188e:	220c      	movs	r2, #12
 8001890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	e009      	b.n	80018ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189e:	4b07      	ldr	r3, [pc, #28]	@ (80018bc <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a05      	ldr	r2, [pc, #20]	@ (80018bc <_sbrk+0x64>)
 80018a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20020000 	.word	0x20020000
 80018b8:	00000400 	.word	0x00000400
 80018bc:	20000178 	.word	0x20000178
 80018c0:	200002c8 	.word	0x200002c8

080018c4 <SystemInit>:
#if defined (DATA_IN_ExtSRAM) || defined (DATA_IN_ExtSDRAM)
  static void SystemInit_ExtMemCtl(void); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

void SystemInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c8:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <SystemInit+0x20>)
 80018ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ce:	4a05      	ldr	r2, [pc, #20]	@ (80018e4 <SystemInit+0x20>)
 80018d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001920 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018ec:	f7ff ffea 	bl	80018c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f0:	480c      	ldr	r0, [pc, #48]	@ (8001924 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018f2:	490d      	ldr	r1, [pc, #52]	@ (8001928 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f4:	4a0d      	ldr	r2, [pc, #52]	@ (800192c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f8:	e002      	b.n	8001900 <LoopCopyDataInit>

080018fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fe:	3304      	adds	r3, #4

08001900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001904:	d3f9      	bcc.n	80018fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001906:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001908:	4c0a      	ldr	r4, [pc, #40]	@ (8001934 <LoopFillZerobss+0x22>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800190c:	e001      	b.n	8001912 <LoopFillZerobss>

0800190e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001910:	3204      	adds	r2, #4

08001912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001914:	d3fb      	bcc.n	800190e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001916:	f003 f981 	bl	8004c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191a:	f7ff fc01 	bl	8001120 <main>
  bx  lr    
 800191e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001920:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001928:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800192c:	08005590 	.word	0x08005590
  ldr r2, =_sbss
 8001930:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001934:	200002c8 	.word	0x200002c8

08001938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC_IRQHandler>
	...

0800193c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001940:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0d      	ldr	r2, [pc, #52]	@ (800197c <HAL_Init+0x40>)
 8001946:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800194a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800194c:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0a      	ldr	r2, [pc, #40]	@ (800197c <HAL_Init+0x40>)
 8001952:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001956:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001958:	4b08      	ldr	r3, [pc, #32]	@ (800197c <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a07      	ldr	r2, [pc, #28]	@ (800197c <HAL_Init+0x40>)
 800195e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f000 f94f 	bl	8001c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196a:	200f      	movs	r0, #15
 800196c:	f000 f808 	bl	8001980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001970:	f7ff fe20 	bl	80015b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023c00 	.word	0x40023c00

08001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001988:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <HAL_InitTick+0x54>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <HAL_InitTick+0x58>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001996:	fbb3 f3f1 	udiv	r3, r3, r1
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f967 	bl	8001c72 <HAL_SYSTICK_Config>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00e      	b.n	80019cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d80a      	bhi.n	80019ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f000 f92f 	bl	8001c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c0:	4a06      	ldr	r2, [pc, #24]	@ (80019dc <HAL_InitTick+0x5c>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_IncTick+0x20>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_IncTick+0x24>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a04      	ldr	r2, [pc, #16]	@ (8001a04 <HAL_IncTick+0x24>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000008 	.word	0x20000008
 8001a04:	2000017c 	.word	0x2000017c

08001a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	@ (8001a1c <HAL_GetTick+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	2000017c 	.word	0x2000017c

08001a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff ffee 	bl	8001a08 <HAL_GetTick>
 8001a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d005      	beq.n	8001a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a64 <HAL_Delay+0x44>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a46:	bf00      	nop
 8001a48:	f7ff ffde 	bl	8001a08 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d8f7      	bhi.n	8001a48 <HAL_Delay+0x28>
  {
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000008 	.word	0x20000008

08001a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a84:	4013      	ands	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9a:	4a04      	ldr	r2, [pc, #16]	@ (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60d3      	str	r3, [r2, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b04      	ldr	r3, [pc, #16]	@ (8001ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 0307 	and.w	r3, r3, #7
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db0b      	blt.n	8001af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4907      	ldr	r1, [pc, #28]	@ (8001b04 <__NVIC_EnableIRQ+0x38>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	2001      	movs	r0, #1
 8001aee:	fa00 f202 	lsl.w	r2, r0, r2
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	@ (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	@ (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	@ 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf28      	it	cs
 8001b7a:	2304      	movcs	r3, #4
 8001b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <NVIC_EncodePriority+0x30>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3b03      	subs	r3, #3
 8001b8a:	e000      	b.n	8001b8e <NVIC_EncodePriority+0x32>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	4313      	orrs	r3, r2
         );
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	@ 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bd4:	d301      	bcc.n	8001bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00f      	b.n	8001bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bda:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <SysTick_Config+0x40>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be2:	210f      	movs	r1, #15
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f7ff ff8e 	bl	8001b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <SysTick_Config+0x40>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf2:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <SysTick_Config+0x40>)
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	e000e010 	.word	0xe000e010

08001c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff29 	bl	8001a68 <__NVIC_SetPriorityGrouping>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c30:	f7ff ff3e 	bl	8001ab0 <__NVIC_GetPriorityGrouping>
 8001c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	6978      	ldr	r0, [r7, #20]
 8001c3c:	f7ff ff8e 	bl	8001b5c <NVIC_EncodePriority>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff5d 	bl	8001b08 <__NVIC_SetPriority>
}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff31 	bl	8001acc <__NVIC_EnableIRQ>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ffa2 	bl	8001bc4 <SysTick_Config>
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	@ 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	e165      	b.n	8001f74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ca8:	2201      	movs	r2, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	f040 8154 	bne.w	8001f6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d005      	beq.n	8001cde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d130      	bne.n	8001d40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d14:	2201      	movs	r2, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 0201 	and.w	r2, r3, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d017      	beq.n	8001d7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d123      	bne.n	8001dd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	08da      	lsrs	r2, r3, #3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3208      	adds	r2, #8
 8001d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	220f      	movs	r2, #15
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	08da      	lsrs	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3208      	adds	r2, #8
 8001dca:	69b9      	ldr	r1, [r7, #24]
 8001dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0203 	and.w	r2, r3, #3
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80ae 	beq.w	8001f6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b5d      	ldr	r3, [pc, #372]	@ (8001f8c <HAL_GPIO_Init+0x300>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	4a5c      	ldr	r2, [pc, #368]	@ (8001f8c <HAL_GPIO_Init+0x300>)
 8001e1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e22:	4b5a      	ldr	r3, [pc, #360]	@ (8001f8c <HAL_GPIO_Init+0x300>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e2e:	4a58      	ldr	r2, [pc, #352]	@ (8001f90 <HAL_GPIO_Init+0x304>)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	3302      	adds	r3, #2
 8001e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	220f      	movs	r2, #15
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4f      	ldr	r2, [pc, #316]	@ (8001f94 <HAL_GPIO_Init+0x308>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d025      	beq.n	8001ea6 <HAL_GPIO_Init+0x21a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4e      	ldr	r2, [pc, #312]	@ (8001f98 <HAL_GPIO_Init+0x30c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01f      	beq.n	8001ea2 <HAL_GPIO_Init+0x216>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4d      	ldr	r2, [pc, #308]	@ (8001f9c <HAL_GPIO_Init+0x310>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d019      	beq.n	8001e9e <HAL_GPIO_Init+0x212>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4c      	ldr	r2, [pc, #304]	@ (8001fa0 <HAL_GPIO_Init+0x314>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_GPIO_Init+0x20e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4b      	ldr	r2, [pc, #300]	@ (8001fa4 <HAL_GPIO_Init+0x318>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00d      	beq.n	8001e96 <HAL_GPIO_Init+0x20a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4a      	ldr	r2, [pc, #296]	@ (8001fa8 <HAL_GPIO_Init+0x31c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <HAL_GPIO_Init+0x206>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a49      	ldr	r2, [pc, #292]	@ (8001fac <HAL_GPIO_Init+0x320>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_GPIO_Init+0x202>
 8001e8a:	2306      	movs	r3, #6
 8001e8c:	e00c      	b.n	8001ea8 <HAL_GPIO_Init+0x21c>
 8001e8e:	2307      	movs	r3, #7
 8001e90:	e00a      	b.n	8001ea8 <HAL_GPIO_Init+0x21c>
 8001e92:	2305      	movs	r3, #5
 8001e94:	e008      	b.n	8001ea8 <HAL_GPIO_Init+0x21c>
 8001e96:	2304      	movs	r3, #4
 8001e98:	e006      	b.n	8001ea8 <HAL_GPIO_Init+0x21c>
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e004      	b.n	8001ea8 <HAL_GPIO_Init+0x21c>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e002      	b.n	8001ea8 <HAL_GPIO_Init+0x21c>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_GPIO_Init+0x21c>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	f002 0203 	and.w	r2, r2, #3
 8001eae:	0092      	lsls	r2, r2, #2
 8001eb0:	4093      	lsls	r3, r2
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb8:	4935      	ldr	r1, [pc, #212]	@ (8001f90 <HAL_GPIO_Init+0x304>)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	089b      	lsrs	r3, r3, #2
 8001ebe:	3302      	adds	r3, #2
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fb0 <HAL_GPIO_Init+0x324>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eea:	4a31      	ldr	r2, [pc, #196]	@ (8001fb0 <HAL_GPIO_Init+0x324>)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8001fb0 <HAL_GPIO_Init+0x324>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f14:	4a26      	ldr	r2, [pc, #152]	@ (8001fb0 <HAL_GPIO_Init+0x324>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f1a:	4b25      	ldr	r3, [pc, #148]	@ (8001fb0 <HAL_GPIO_Init+0x324>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fb0 <HAL_GPIO_Init+0x324>)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f44:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb0 <HAL_GPIO_Init+0x324>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f68:	4a11      	ldr	r2, [pc, #68]	@ (8001fb0 <HAL_GPIO_Init+0x324>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3301      	adds	r3, #1
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	2b0f      	cmp	r3, #15
 8001f78:	f67f ae96 	bls.w	8001ca8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	3724      	adds	r7, #36	@ 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40013800 	.word	0x40013800
 8001f94:	40020000 	.word	0x40020000
 8001f98:	40020400 	.word	0x40020400
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	40020c00 	.word	0x40020c00
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40021400 	.word	0x40021400
 8001fac:	40021800 	.word	0x40021800
 8001fb0:	40013c00 	.word	0x40013c00

08001fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc4:	787b      	ldrb	r3, [r7, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fd0:	e003      	b.n	8001fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fd2:	887b      	ldrh	r3, [r7, #2]
 8001fd4:	041a      	lsls	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	619a      	str	r2, [r3, #24]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e12b      	b.n	8002252 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d106      	bne.n	8002014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff faf8 	bl	8001604 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2224      	movs	r2, #36	@ 0x24
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0201 	bic.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800203a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800204a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800204c:	f000 fdac 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 8002050:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4a81      	ldr	r2, [pc, #516]	@ (800225c <HAL_I2C_Init+0x274>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d807      	bhi.n	800206c <HAL_I2C_Init+0x84>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4a80      	ldr	r2, [pc, #512]	@ (8002260 <HAL_I2C_Init+0x278>)
 8002060:	4293      	cmp	r3, r2
 8002062:	bf94      	ite	ls
 8002064:	2301      	movls	r3, #1
 8002066:	2300      	movhi	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	e006      	b.n	800207a <HAL_I2C_Init+0x92>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4a7d      	ldr	r2, [pc, #500]	@ (8002264 <HAL_I2C_Init+0x27c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	bf94      	ite	ls
 8002074:	2301      	movls	r3, #1
 8002076:	2300      	movhi	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e0e7      	b.n	8002252 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4a78      	ldr	r2, [pc, #480]	@ (8002268 <HAL_I2C_Init+0x280>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	0c9b      	lsrs	r3, r3, #18
 800208c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	430a      	orrs	r2, r1
 80020a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4a6a      	ldr	r2, [pc, #424]	@ (800225c <HAL_I2C_Init+0x274>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d802      	bhi.n	80020bc <HAL_I2C_Init+0xd4>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	3301      	adds	r3, #1
 80020ba:	e009      	b.n	80020d0 <HAL_I2C_Init+0xe8>
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	4a69      	ldr	r2, [pc, #420]	@ (800226c <HAL_I2C_Init+0x284>)
 80020c8:	fba2 2303 	umull	r2, r3, r2, r3
 80020cc:	099b      	lsrs	r3, r3, #6
 80020ce:	3301      	adds	r3, #1
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	430b      	orrs	r3, r1
 80020d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	495c      	ldr	r1, [pc, #368]	@ (800225c <HAL_I2C_Init+0x274>)
 80020ec:	428b      	cmp	r3, r1
 80020ee:	d819      	bhi.n	8002124 <HAL_I2C_Init+0x13c>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1e59      	subs	r1, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80020fe:	1c59      	adds	r1, r3, #1
 8002100:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002104:	400b      	ands	r3, r1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00a      	beq.n	8002120 <HAL_I2C_Init+0x138>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1e59      	subs	r1, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fbb1 f3f3 	udiv	r3, r1, r3
 8002118:	3301      	adds	r3, #1
 800211a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211e:	e051      	b.n	80021c4 <HAL_I2C_Init+0x1dc>
 8002120:	2304      	movs	r3, #4
 8002122:	e04f      	b.n	80021c4 <HAL_I2C_Init+0x1dc>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d111      	bne.n	8002150 <HAL_I2C_Init+0x168>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1e58      	subs	r0, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6859      	ldr	r1, [r3, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	440b      	add	r3, r1
 800213a:	fbb0 f3f3 	udiv	r3, r0, r3
 800213e:	3301      	adds	r3, #1
 8002140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	e012      	b.n	8002176 <HAL_I2C_Init+0x18e>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1e58      	subs	r0, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6859      	ldr	r1, [r3, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	0099      	lsls	r1, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	fbb0 f3f3 	udiv	r3, r0, r3
 8002166:	3301      	adds	r3, #1
 8002168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf0c      	ite	eq
 8002170:	2301      	moveq	r3, #1
 8002172:	2300      	movne	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_I2C_Init+0x196>
 800217a:	2301      	movs	r3, #1
 800217c:	e022      	b.n	80021c4 <HAL_I2C_Init+0x1dc>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10e      	bne.n	80021a4 <HAL_I2C_Init+0x1bc>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1e58      	subs	r0, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6859      	ldr	r1, [r3, #4]
 800218e:	460b      	mov	r3, r1
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	440b      	add	r3, r1
 8002194:	fbb0 f3f3 	udiv	r3, r0, r3
 8002198:	3301      	adds	r3, #1
 800219a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021a2:	e00f      	b.n	80021c4 <HAL_I2C_Init+0x1dc>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	1e58      	subs	r0, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6859      	ldr	r1, [r3, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	0099      	lsls	r1, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ba:	3301      	adds	r3, #1
 80021bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	6809      	ldr	r1, [r1, #0]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69da      	ldr	r2, [r3, #28]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80021f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6911      	ldr	r1, [r2, #16]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68d2      	ldr	r2, [r2, #12]
 80021fe:	4311      	orrs	r1, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	430b      	orrs	r3, r1
 8002206:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2220      	movs	r2, #32
 800223e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	000186a0 	.word	0x000186a0
 8002260:	001e847f 	.word	0x001e847f
 8002264:	003d08ff 	.word	0x003d08ff
 8002268:	431bde83 	.word	0x431bde83
 800226c:	10624dd3 	.word	0x10624dd3

08002270 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af02      	add	r7, sp, #8
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	461a      	mov	r2, r3
 800227c:	460b      	mov	r3, r1
 800227e:	817b      	strh	r3, [r7, #10]
 8002280:	4613      	mov	r3, r2
 8002282:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002284:	f7ff fbc0 	bl	8001a08 <HAL_GetTick>
 8002288:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b20      	cmp	r3, #32
 8002294:	f040 80e0 	bne.w	8002458 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	2319      	movs	r3, #25
 800229e:	2201      	movs	r2, #1
 80022a0:	4970      	ldr	r1, [pc, #448]	@ (8002464 <HAL_I2C_Master_Transmit+0x1f4>)
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f964 	bl	8002570 <I2C_WaitOnFlagUntilTimeout>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022ae:	2302      	movs	r3, #2
 80022b0:	e0d3      	b.n	800245a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_I2C_Master_Transmit+0x50>
 80022bc:	2302      	movs	r3, #2
 80022be:	e0cc      	b.n	800245a <HAL_I2C_Master_Transmit+0x1ea>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d007      	beq.n	80022e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0201 	orr.w	r2, r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2221      	movs	r2, #33	@ 0x21
 80022fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2210      	movs	r2, #16
 8002302:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	893a      	ldrh	r2, [r7, #8]
 8002316:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4a50      	ldr	r2, [pc, #320]	@ (8002468 <HAL_I2C_Master_Transmit+0x1f8>)
 8002326:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002328:	8979      	ldrh	r1, [r7, #10]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	6a3a      	ldr	r2, [r7, #32]
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f89c 	bl	800246c <I2C_MasterRequestWrite>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e08d      	b.n	800245a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002354:	e066      	b.n	8002424 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	6a39      	ldr	r1, [r7, #32]
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 fa22 	bl	80027a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00d      	beq.n	8002382 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	2b04      	cmp	r3, #4
 800236c:	d107      	bne.n	800237e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800237c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e06b      	b.n	800245a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	781a      	ldrb	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800239c:	b29b      	uxth	r3, r3
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d11b      	bne.n	80023f8 <HAL_I2C_Master_Transmit+0x188>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d017      	beq.n	80023f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	6a39      	ldr	r1, [r7, #32]
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 fa19 	bl	8002834 <I2C_WaitOnBTFFlagUntilTimeout>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00d      	beq.n	8002424 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	2b04      	cmp	r3, #4
 800240e:	d107      	bne.n	8002420 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800241e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e01a      	b.n	800245a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002428:	2b00      	cmp	r3, #0
 800242a:	d194      	bne.n	8002356 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800243a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	e000      	b.n	800245a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002458:	2302      	movs	r3, #2
  }
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	00100002 	.word	0x00100002
 8002468:	ffff0000 	.word	0xffff0000

0800246c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af02      	add	r7, sp, #8
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	460b      	mov	r3, r1
 800247a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002480:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2b08      	cmp	r3, #8
 8002486:	d006      	beq.n	8002496 <I2C_MasterRequestWrite+0x2a>
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d003      	beq.n	8002496 <I2C_MasterRequestWrite+0x2a>
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002494:	d108      	bne.n	80024a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	e00b      	b.n	80024c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ac:	2b12      	cmp	r3, #18
 80024ae:	d107      	bne.n	80024c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 f84f 	bl	8002570 <I2C_WaitOnFlagUntilTimeout>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00d      	beq.n	80024f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024e6:	d103      	bne.n	80024f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e035      	b.n	8002560 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024fc:	d108      	bne.n	8002510 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024fe:	897b      	ldrh	r3, [r7, #10]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800250c:	611a      	str	r2, [r3, #16]
 800250e:	e01b      	b.n	8002548 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002510:	897b      	ldrh	r3, [r7, #10]
 8002512:	11db      	asrs	r3, r3, #7
 8002514:	b2db      	uxtb	r3, r3
 8002516:	f003 0306 	and.w	r3, r3, #6
 800251a:	b2db      	uxtb	r3, r3
 800251c:	f063 030f 	orn	r3, r3, #15
 8002520:	b2da      	uxtb	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	490e      	ldr	r1, [pc, #56]	@ (8002568 <I2C_MasterRequestWrite+0xfc>)
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f898 	bl	8002664 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e010      	b.n	8002560 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800253e:	897b      	ldrh	r3, [r7, #10]
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	4907      	ldr	r1, [pc, #28]	@ (800256c <I2C_MasterRequestWrite+0x100>)
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f888 	bl	8002664 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	00010008 	.word	0x00010008
 800256c:	00010002 	.word	0x00010002

08002570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	4613      	mov	r3, r2
 800257e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002580:	e048      	b.n	8002614 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002588:	d044      	beq.n	8002614 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258a:	f7ff fa3d 	bl	8001a08 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d302      	bcc.n	80025a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d139      	bne.n	8002614 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	0c1b      	lsrs	r3, r3, #16
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d10d      	bne.n	80025c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	43da      	mvns	r2, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	4013      	ands	r3, r2
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf0c      	ite	eq
 80025bc:	2301      	moveq	r3, #1
 80025be:	2300      	movne	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	461a      	mov	r2, r3
 80025c4:	e00c      	b.n	80025e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	43da      	mvns	r2, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	4013      	ands	r3, r2
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf0c      	ite	eq
 80025d8:	2301      	moveq	r3, #1
 80025da:	2300      	movne	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d116      	bne.n	8002614 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	f043 0220 	orr.w	r2, r3, #32
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e023      	b.n	800265c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	0c1b      	lsrs	r3, r3, #16
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b01      	cmp	r3, #1
 800261c:	d10d      	bne.n	800263a <I2C_WaitOnFlagUntilTimeout+0xca>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	43da      	mvns	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	4013      	ands	r3, r2
 800262a:	b29b      	uxth	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	e00c      	b.n	8002654 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	43da      	mvns	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	4013      	ands	r3, r2
 8002646:	b29b      	uxth	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf0c      	ite	eq
 800264c:	2301      	moveq	r3, #1
 800264e:	2300      	movne	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	461a      	mov	r2, r3
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	429a      	cmp	r2, r3
 8002658:	d093      	beq.n	8002582 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002672:	e071      	b.n	8002758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800267e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002682:	d123      	bne.n	80026cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002692:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800269c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2220      	movs	r2, #32
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b8:	f043 0204 	orr.w	r2, r3, #4
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e067      	b.n	800279c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d2:	d041      	beq.n	8002758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d4:	f7ff f998 	bl	8001a08 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d302      	bcc.n	80026ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d136      	bne.n	8002758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	0c1b      	lsrs	r3, r3, #16
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d10c      	bne.n	800270e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	43da      	mvns	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	4013      	ands	r3, r2
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	bf14      	ite	ne
 8002706:	2301      	movne	r3, #1
 8002708:	2300      	moveq	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	e00b      	b.n	8002726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	43da      	mvns	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4013      	ands	r3, r2
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf14      	ite	ne
 8002720:	2301      	movne	r3, #1
 8002722:	2300      	moveq	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d016      	beq.n	8002758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002744:	f043 0220 	orr.w	r2, r3, #32
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e021      	b.n	800279c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	0c1b      	lsrs	r3, r3, #16
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d10c      	bne.n	800277c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	43da      	mvns	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	4013      	ands	r3, r2
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf14      	ite	ne
 8002774:	2301      	movne	r3, #1
 8002776:	2300      	moveq	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	e00b      	b.n	8002794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	43da      	mvns	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4013      	ands	r3, r2
 8002788:	b29b      	uxth	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	bf14      	ite	ne
 800278e:	2301      	movne	r3, #1
 8002790:	2300      	moveq	r3, #0
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	f47f af6d 	bne.w	8002674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027b0:	e034      	b.n	800281c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f886 	bl	80028c4 <I2C_IsAcknowledgeFailed>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e034      	b.n	800282c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d028      	beq.n	800281c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ca:	f7ff f91d 	bl	8001a08 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d302      	bcc.n	80027e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d11d      	bne.n	800281c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ea:	2b80      	cmp	r3, #128	@ 0x80
 80027ec:	d016      	beq.n	800281c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	f043 0220 	orr.w	r2, r3, #32
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e007      	b.n	800282c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002826:	2b80      	cmp	r3, #128	@ 0x80
 8002828:	d1c3      	bne.n	80027b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002840:	e034      	b.n	80028ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f83e 	bl	80028c4 <I2C_IsAcknowledgeFailed>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e034      	b.n	80028bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002858:	d028      	beq.n	80028ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285a:	f7ff f8d5 	bl	8001a08 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	429a      	cmp	r2, r3
 8002868:	d302      	bcc.n	8002870 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d11d      	bne.n	80028ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b04      	cmp	r3, #4
 800287c:	d016      	beq.n	80028ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002898:	f043 0220 	orr.w	r2, r3, #32
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e007      	b.n	80028bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d1c3      	bne.n	8002842 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028da:	d11b      	bne.n	8002914 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	f043 0204 	orr.w	r2, r3, #4
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	603b      	str	r3, [r7, #0]
 8002932:	4b20      	ldr	r3, [pc, #128]	@ (80029b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	4a1f      	ldr	r2, [pc, #124]	@ (80029b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800293c:	6413      	str	r3, [r2, #64]	@ 0x40
 800293e:	4b1d      	ldr	r3, [pc, #116]	@ (80029b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800294a:	4b1b      	ldr	r3, [pc, #108]	@ (80029b8 <HAL_PWREx_EnableOverDrive+0x94>)
 800294c:	2201      	movs	r2, #1
 800294e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002950:	f7ff f85a 	bl	8001a08 <HAL_GetTick>
 8002954:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002956:	e009      	b.n	800296c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002958:	f7ff f856 	bl	8001a08 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002966:	d901      	bls.n	800296c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e01f      	b.n	80029ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800296c:	4b13      	ldr	r3, [pc, #76]	@ (80029bc <HAL_PWREx_EnableOverDrive+0x98>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002978:	d1ee      	bne.n	8002958 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800297a:	4b11      	ldr	r3, [pc, #68]	@ (80029c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800297c:	2201      	movs	r2, #1
 800297e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002980:	f7ff f842 	bl	8001a08 <HAL_GetTick>
 8002984:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002986:	e009      	b.n	800299c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002988:	f7ff f83e 	bl	8001a08 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002996:	d901      	bls.n	800299c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e007      	b.n	80029ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800299c:	4b07      	ldr	r3, [pc, #28]	@ (80029bc <HAL_PWREx_EnableOverDrive+0x98>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029a8:	d1ee      	bne.n	8002988 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40023800 	.word	0x40023800
 80029b8:	420e0040 	.word	0x420e0040
 80029bc:	40007000 	.word	0x40007000
 80029c0:	420e0044 	.word	0x420e0044

080029c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0cc      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d8:	4b68      	ldr	r3, [pc, #416]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 030f 	and.w	r3, r3, #15
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d90c      	bls.n	8002a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b65      	ldr	r3, [pc, #404]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b63      	ldr	r3, [pc, #396]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0b8      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d020      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a18:	4b59      	ldr	r3, [pc, #356]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	4a58      	ldr	r2, [pc, #352]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a30:	4b53      	ldr	r3, [pc, #332]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	4a52      	ldr	r2, [pc, #328]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a3c:	4b50      	ldr	r3, [pc, #320]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	494d      	ldr	r1, [pc, #308]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d044      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d107      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	4b47      	ldr	r3, [pc, #284]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d119      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e07f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d003      	beq.n	8002a82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a82:	4b3f      	ldr	r3, [pc, #252]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e06f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a92:	4b3b      	ldr	r3, [pc, #236]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e067      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa2:	4b37      	ldr	r3, [pc, #220]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f023 0203 	bic.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4934      	ldr	r1, [pc, #208]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab4:	f7fe ffa8 	bl	8001a08 <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abc:	f7fe ffa4 	bl	8001a08 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e04f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 020c 	and.w	r2, r3, #12
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d1eb      	bne.n	8002abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b25      	ldr	r3, [pc, #148]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d20c      	bcs.n	8002b0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b22      	ldr	r3, [pc, #136]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b20      	ldr	r3, [pc, #128]	@ (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e032      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b18:	4b19      	ldr	r3, [pc, #100]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4916      	ldr	r1, [pc, #88]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b36:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	490e      	ldr	r1, [pc, #56]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b4a:	f000 f841 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	490a      	ldr	r1, [pc, #40]	@ (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5c:	5ccb      	ldrb	r3, [r1, r3]
 8002b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b62:	4a09      	ldr	r2, [pc, #36]	@ (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b66:	4b09      	ldr	r3, [pc, #36]	@ (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe ff08 	bl	8001980 <HAL_InitTick>

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023c00 	.word	0x40023c00
 8002b80:	40023800 	.word	0x40023800
 8002b84:	08005534 	.word	0x08005534
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	20000004 	.word	0x20000004

08002b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b94:	4b03      	ldr	r3, [pc, #12]	@ (8002ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000000 	.word	0x20000000

08002ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bac:	f7ff fff0 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	4b05      	ldr	r3, [pc, #20]	@ (8002bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	0a9b      	lsrs	r3, r3, #10
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	4903      	ldr	r1, [pc, #12]	@ (8002bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bbe:	5ccb      	ldrb	r3, [r1, r3]
 8002bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	08005544 	.word	0x08005544

08002bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bd4:	b0a6      	sub	sp, #152	@ 0x98
 8002bd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bf6:	4bc8      	ldr	r3, [pc, #800]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	2b0c      	cmp	r3, #12
 8002c00:	f200 817e 	bhi.w	8002f00 <HAL_RCC_GetSysClockFreq+0x330>
 8002c04:	a201      	add	r2, pc, #4	@ (adr r2, 8002c0c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0a:	bf00      	nop
 8002c0c:	08002c41 	.word	0x08002c41
 8002c10:	08002f01 	.word	0x08002f01
 8002c14:	08002f01 	.word	0x08002f01
 8002c18:	08002f01 	.word	0x08002f01
 8002c1c:	08002c49 	.word	0x08002c49
 8002c20:	08002f01 	.word	0x08002f01
 8002c24:	08002f01 	.word	0x08002f01
 8002c28:	08002f01 	.word	0x08002f01
 8002c2c:	08002c51 	.word	0x08002c51
 8002c30:	08002f01 	.word	0x08002f01
 8002c34:	08002f01 	.word	0x08002f01
 8002c38:	08002f01 	.word	0x08002f01
 8002c3c:	08002dbb 	.word	0x08002dbb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c40:	4bb6      	ldr	r3, [pc, #728]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002c42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8002c46:	e15f      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c48:	4bb5      	ldr	r3, [pc, #724]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002c4e:	e15b      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c50:	4bb1      	ldr	r3, [pc, #708]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c5c:	4bae      	ldr	r3, [pc, #696]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d031      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c68:	4bab      	ldr	r3, [pc, #684]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	099b      	lsrs	r3, r3, #6
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c80:	4ba7      	ldr	r3, [pc, #668]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c82:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002c86:	462a      	mov	r2, r5
 8002c88:	fb03 f202 	mul.w	r2, r3, r2
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	4621      	mov	r1, r4
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	4aa2      	ldr	r2, [pc, #648]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c98:	4621      	mov	r1, r4
 8002c9a:	fba1 1202 	umull	r1, r2, r1, r2
 8002c9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ca0:	460a      	mov	r2, r1
 8002ca2:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002ca4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002ca6:	4413      	add	r3, r2
 8002ca8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cae:	2200      	movs	r2, #0
 8002cb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002cb2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002cb4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002cb8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002cbc:	f7fd fee6 	bl	8000a8c <__aeabi_uldivmod>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002cca:	e064      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ccc:	4b92      	ldr	r3, [pc, #584]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	099b      	lsrs	r3, r3, #6
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cd6:	657a      	str	r2, [r7, #84]	@ 0x54
 8002cd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ce4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002ce8:	4622      	mov	r2, r4
 8002cea:	462b      	mov	r3, r5
 8002cec:	f04f 0000 	mov.w	r0, #0
 8002cf0:	f04f 0100 	mov.w	r1, #0
 8002cf4:	0159      	lsls	r1, r3, #5
 8002cf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cfa:	0150      	lsls	r0, r2, #5
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4621      	mov	r1, r4
 8002d02:	1a51      	subs	r1, r2, r1
 8002d04:	6139      	str	r1, [r7, #16]
 8002d06:	4629      	mov	r1, r5
 8002d08:	eb63 0301 	sbc.w	r3, r3, r1
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d1a:	4659      	mov	r1, fp
 8002d1c:	018b      	lsls	r3, r1, #6
 8002d1e:	4651      	mov	r1, sl
 8002d20:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d24:	4651      	mov	r1, sl
 8002d26:	018a      	lsls	r2, r1, #6
 8002d28:	4651      	mov	r1, sl
 8002d2a:	ebb2 0801 	subs.w	r8, r2, r1
 8002d2e:	4659      	mov	r1, fp
 8002d30:	eb63 0901 	sbc.w	r9, r3, r1
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d40:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d44:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d48:	4690      	mov	r8, r2
 8002d4a:	4699      	mov	r9, r3
 8002d4c:	4623      	mov	r3, r4
 8002d4e:	eb18 0303 	adds.w	r3, r8, r3
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	462b      	mov	r3, r5
 8002d56:	eb49 0303 	adc.w	r3, r9, r3
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d68:	4629      	mov	r1, r5
 8002d6a:	028b      	lsls	r3, r1, #10
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d72:	4621      	mov	r1, r4
 8002d74:	028a      	lsls	r2, r1, #10
 8002d76:	4610      	mov	r0, r2
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d7e:	2200      	movs	r2, #0
 8002d80:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d82:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d88:	f7fd fe80 	bl	8000a8c <__aeabi_uldivmod>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4613      	mov	r3, r2
 8002d92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d96:	4b60      	ldr	r3, [pc, #384]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	0c1b      	lsrs	r3, r3, #16
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	3301      	adds	r3, #1
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8002da8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002db8:	e0a6      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dba:	4b57      	ldr	r3, [pc, #348]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x348>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dc6:	4b54      	ldr	r3, [pc, #336]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x348>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d02a      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd2:	4b51      	ldr	r3, [pc, #324]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x348>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	099b      	lsrs	r3, r3, #6
 8002dd8:	2200      	movs	r2, #0
 8002dda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ddc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002de4:	2100      	movs	r1, #0
 8002de6:	4b4e      	ldr	r3, [pc, #312]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x350>)
 8002de8:	fb03 f201 	mul.w	r2, r3, r1
 8002dec:	2300      	movs	r3, #0
 8002dee:	fb00 f303 	mul.w	r3, r0, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	4a4a      	ldr	r2, [pc, #296]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x350>)
 8002df6:	fba0 1202 	umull	r1, r2, r0, r2
 8002dfa:	677a      	str	r2, [r7, #116]	@ 0x74
 8002dfc:	460a      	mov	r2, r1
 8002dfe:	673a      	str	r2, [r7, #112]	@ 0x70
 8002e00:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002e02:	4413      	add	r3, r2
 8002e04:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e0e:	637a      	str	r2, [r7, #52]	@ 0x34
 8002e10:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002e14:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002e18:	f7fd fe38 	bl	8000a8c <__aeabi_uldivmod>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4613      	mov	r3, r2
 8002e22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002e26:	e05b      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e28:	4b3b      	ldr	r3, [pc, #236]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	099b      	lsrs	r3, r3, #6
 8002e2e:	2200      	movs	r2, #0
 8002e30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3a:	623b      	str	r3, [r7, #32]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e44:	4642      	mov	r2, r8
 8002e46:	464b      	mov	r3, r9
 8002e48:	f04f 0000 	mov.w	r0, #0
 8002e4c:	f04f 0100 	mov.w	r1, #0
 8002e50:	0159      	lsls	r1, r3, #5
 8002e52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e56:	0150      	lsls	r0, r2, #5
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e62:	4649      	mov	r1, r9
 8002e64:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e7c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e80:	eb63 050b 	sbc.w	r5, r3, fp
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	00eb      	lsls	r3, r5, #3
 8002e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e92:	00e2      	lsls	r2, r4, #3
 8002e94:	4614      	mov	r4, r2
 8002e96:	461d      	mov	r5, r3
 8002e98:	4643      	mov	r3, r8
 8002e9a:	18e3      	adds	r3, r4, r3
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	464b      	mov	r3, r9
 8002ea0:	eb45 0303 	adc.w	r3, r5, r3
 8002ea4:	607b      	str	r3, [r7, #4]
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	f04f 0300 	mov.w	r3, #0
 8002eae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eb2:	4629      	mov	r1, r5
 8002eb4:	028b      	lsls	r3, r1, #10
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ebc:	4621      	mov	r1, r4
 8002ebe:	028a      	lsls	r2, r1, #10
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ec8:	2200      	movs	r2, #0
 8002eca:	61bb      	str	r3, [r7, #24]
 8002ecc:	61fa      	str	r2, [r7, #28]
 8002ece:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ed2:	f7fd fddb 	bl	8000a8c <__aeabi_uldivmod>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4613      	mov	r3, r2
 8002edc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	0f1b      	lsrs	r3, r3, #28
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8002eee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ef2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002efe:	e003      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f00:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002f02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002f06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3798      	adds	r7, #152	@ 0x98
 8002f10:	46bd      	mov	sp, r7
 8002f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	00f42400 	.word	0x00f42400
 8002f20:	017d7840 	.word	0x017d7840

08002f24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e28d      	b.n	8003452 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8083 	beq.w	800304a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f44:	4b94      	ldr	r3, [pc, #592]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 030c 	and.w	r3, r3, #12
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d019      	beq.n	8002f84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f50:	4b91      	ldr	r3, [pc, #580]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f5c:	4b8e      	ldr	r3, [pc, #568]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f68:	d00c      	beq.n	8002f84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f6a:	4b8b      	ldr	r3, [pc, #556]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f72:	2b0c      	cmp	r3, #12
 8002f74:	d112      	bne.n	8002f9c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f76:	4b88      	ldr	r3, [pc, #544]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f82:	d10b      	bne.n	8002f9c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f84:	4b84      	ldr	r3, [pc, #528]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d05b      	beq.n	8003048 <HAL_RCC_OscConfig+0x124>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d157      	bne.n	8003048 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e25a      	b.n	8003452 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa4:	d106      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x90>
 8002fa6:	4b7c      	ldr	r3, [pc, #496]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a7b      	ldr	r2, [pc, #492]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8002fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	e01d      	b.n	8002ff0 <HAL_RCC_OscConfig+0xcc>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0xb4>
 8002fbe:	4b76      	ldr	r3, [pc, #472]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a75      	ldr	r2, [pc, #468]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8002fc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	4b73      	ldr	r3, [pc, #460]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a72      	ldr	r2, [pc, #456]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8002fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	e00b      	b.n	8002ff0 <HAL_RCC_OscConfig+0xcc>
 8002fd8:	4b6f      	ldr	r3, [pc, #444]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a6e      	ldr	r2, [pc, #440]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8002fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	4b6c      	ldr	r3, [pc, #432]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a6b      	ldr	r2, [pc, #428]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8002fea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d013      	beq.n	8003020 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fd06 	bl	8001a08 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003000:	f7fe fd02 	bl	8001a08 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	@ 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e21f      	b.n	8003452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003012:	4b61      	ldr	r3, [pc, #388]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0xdc>
 800301e:	e014      	b.n	800304a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7fe fcf2 	bl	8001a08 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003028:	f7fe fcee 	bl	8001a08 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b64      	cmp	r3, #100	@ 0x64
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e20b      	b.n	8003452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800303a:	4b57      	ldr	r3, [pc, #348]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x104>
 8003046:	e000      	b.n	800304a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d06f      	beq.n	8003136 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003056:	4b50      	ldr	r3, [pc, #320]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b00      	cmp	r3, #0
 8003060:	d017      	beq.n	8003092 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003062:	4b4d      	ldr	r3, [pc, #308]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800306a:	2b08      	cmp	r3, #8
 800306c:	d105      	bne.n	800307a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800306e:	4b4a      	ldr	r3, [pc, #296]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00b      	beq.n	8003092 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800307a:	4b47      	ldr	r3, [pc, #284]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003082:	2b0c      	cmp	r3, #12
 8003084:	d11c      	bne.n	80030c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003086:	4b44      	ldr	r3, [pc, #272]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d116      	bne.n	80030c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003092:	4b41      	ldr	r3, [pc, #260]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <HAL_RCC_OscConfig+0x186>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d001      	beq.n	80030aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e1d3      	b.n	8003452 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4937      	ldr	r1, [pc, #220]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030be:	e03a      	b.n	8003136 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d020      	beq.n	800310a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c8:	4b34      	ldr	r3, [pc, #208]	@ (800319c <HAL_RCC_OscConfig+0x278>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ce:	f7fe fc9b 	bl	8001a08 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d6:	f7fe fc97 	bl	8001a08 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e1b4      	b.n	8003452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f4:	4b28      	ldr	r3, [pc, #160]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4925      	ldr	r1, [pc, #148]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8003104:	4313      	orrs	r3, r2
 8003106:	600b      	str	r3, [r1, #0]
 8003108:	e015      	b.n	8003136 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800310a:	4b24      	ldr	r3, [pc, #144]	@ (800319c <HAL_RCC_OscConfig+0x278>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fe fc7a 	bl	8001a08 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003118:	f7fe fc76 	bl	8001a08 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e193      	b.n	8003452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800312a:	4b1b      	ldr	r3, [pc, #108]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d036      	beq.n	80031b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d016      	beq.n	8003178 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800314a:	4b15      	ldr	r3, [pc, #84]	@ (80031a0 <HAL_RCC_OscConfig+0x27c>)
 800314c:	2201      	movs	r2, #1
 800314e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7fe fc5a 	bl	8001a08 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003158:	f7fe fc56 	bl	8001a08 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e173      	b.n	8003452 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800316a:	4b0b      	ldr	r3, [pc, #44]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 800316c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0x234>
 8003176:	e01b      	b.n	80031b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003178:	4b09      	ldr	r3, [pc, #36]	@ (80031a0 <HAL_RCC_OscConfig+0x27c>)
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317e:	f7fe fc43 	bl	8001a08 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003184:	e00e      	b.n	80031a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003186:	f7fe fc3f 	bl	8001a08 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d907      	bls.n	80031a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e15c      	b.n	8003452 <HAL_RCC_OscConfig+0x52e>
 8003198:	40023800 	.word	0x40023800
 800319c:	42470000 	.word	0x42470000
 80031a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a4:	4b8a      	ldr	r3, [pc, #552]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 80031a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1ea      	bne.n	8003186 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 8097 	beq.w	80032ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031be:	2300      	movs	r3, #0
 80031c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031c2:	4b83      	ldr	r3, [pc, #524]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10f      	bne.n	80031ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	4b7f      	ldr	r3, [pc, #508]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	4a7e      	ldr	r2, [pc, #504]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 80031d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80031de:	4b7c      	ldr	r3, [pc, #496]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ea:	2301      	movs	r3, #1
 80031ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ee:	4b79      	ldr	r3, [pc, #484]	@ (80033d4 <HAL_RCC_OscConfig+0x4b0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d118      	bne.n	800322c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031fa:	4b76      	ldr	r3, [pc, #472]	@ (80033d4 <HAL_RCC_OscConfig+0x4b0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a75      	ldr	r2, [pc, #468]	@ (80033d4 <HAL_RCC_OscConfig+0x4b0>)
 8003200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003206:	f7fe fbff 	bl	8001a08 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320e:	f7fe fbfb 	bl	8001a08 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e118      	b.n	8003452 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003220:	4b6c      	ldr	r3, [pc, #432]	@ (80033d4 <HAL_RCC_OscConfig+0x4b0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x31e>
 8003234:	4b66      	ldr	r3, [pc, #408]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003238:	4a65      	ldr	r2, [pc, #404]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003240:	e01c      	b.n	800327c <HAL_RCC_OscConfig+0x358>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b05      	cmp	r3, #5
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x340>
 800324a:	4b61      	ldr	r3, [pc, #388]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800324e:	4a60      	ldr	r2, [pc, #384]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 8003250:	f043 0304 	orr.w	r3, r3, #4
 8003254:	6713      	str	r3, [r2, #112]	@ 0x70
 8003256:	4b5e      	ldr	r3, [pc, #376]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325a:	4a5d      	ldr	r2, [pc, #372]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	6713      	str	r3, [r2, #112]	@ 0x70
 8003262:	e00b      	b.n	800327c <HAL_RCC_OscConfig+0x358>
 8003264:	4b5a      	ldr	r3, [pc, #360]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 8003266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003268:	4a59      	ldr	r2, [pc, #356]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 800326a:	f023 0301 	bic.w	r3, r3, #1
 800326e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003270:	4b57      	ldr	r3, [pc, #348]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 8003272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003274:	4a56      	ldr	r2, [pc, #344]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 8003276:	f023 0304 	bic.w	r3, r3, #4
 800327a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d015      	beq.n	80032b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003284:	f7fe fbc0 	bl	8001a08 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800328c:	f7fe fbbc 	bl	8001a08 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e0d7      	b.n	8003452 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a2:	4b4b      	ldr	r3, [pc, #300]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0ee      	beq.n	800328c <HAL_RCC_OscConfig+0x368>
 80032ae:	e014      	b.n	80032da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b0:	f7fe fbaa 	bl	8001a08 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b6:	e00a      	b.n	80032ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b8:	f7fe fba6 	bl	8001a08 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e0c1      	b.n	8003452 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ce:	4b40      	ldr	r3, [pc, #256]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 80032d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1ee      	bne.n	80032b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032da:	7dfb      	ldrb	r3, [r7, #23]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d105      	bne.n	80032ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e0:	4b3b      	ldr	r3, [pc, #236]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 80032e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e4:	4a3a      	ldr	r2, [pc, #232]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 80032e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 80ad 	beq.w	8003450 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032f6:	4b36      	ldr	r3, [pc, #216]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d060      	beq.n	80033c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d145      	bne.n	8003396 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330a:	4b33      	ldr	r3, [pc, #204]	@ (80033d8 <HAL_RCC_OscConfig+0x4b4>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7fe fb7a 	bl	8001a08 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003318:	f7fe fb76 	bl	8001a08 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e093      	b.n	8003452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332a:	4b29      	ldr	r3, [pc, #164]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69da      	ldr	r2, [r3, #28]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003344:	019b      	lsls	r3, r3, #6
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334c:	085b      	lsrs	r3, r3, #1
 800334e:	3b01      	subs	r3, #1
 8003350:	041b      	lsls	r3, r3, #16
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003358:	061b      	lsls	r3, r3, #24
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003360:	071b      	lsls	r3, r3, #28
 8003362:	491b      	ldr	r1, [pc, #108]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003368:	4b1b      	ldr	r3, [pc, #108]	@ (80033d8 <HAL_RCC_OscConfig+0x4b4>)
 800336a:	2201      	movs	r2, #1
 800336c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336e:	f7fe fb4b 	bl	8001a08 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003376:	f7fe fb47 	bl	8001a08 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e064      	b.n	8003452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003388:	4b11      	ldr	r3, [pc, #68]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0f0      	beq.n	8003376 <HAL_RCC_OscConfig+0x452>
 8003394:	e05c      	b.n	8003450 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003396:	4b10      	ldr	r3, [pc, #64]	@ (80033d8 <HAL_RCC_OscConfig+0x4b4>)
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fe fb34 	bl	8001a08 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a4:	f7fe fb30 	bl	8001a08 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e04d      	b.n	8003452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b6:	4b06      	ldr	r3, [pc, #24]	@ (80033d0 <HAL_RCC_OscConfig+0x4ac>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0x480>
 80033c2:	e045      	b.n	8003450 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d107      	bne.n	80033dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e040      	b.n	8003452 <HAL_RCC_OscConfig+0x52e>
 80033d0:	40023800 	.word	0x40023800
 80033d4:	40007000 	.word	0x40007000
 80033d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033dc:	4b1f      	ldr	r3, [pc, #124]	@ (800345c <HAL_RCC_OscConfig+0x538>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d030      	beq.n	800344c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d129      	bne.n	800344c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003402:	429a      	cmp	r2, r3
 8003404:	d122      	bne.n	800344c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800340c:	4013      	ands	r3, r2
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003412:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003414:	4293      	cmp	r3, r2
 8003416:	d119      	bne.n	800344c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003422:	085b      	lsrs	r3, r3, #1
 8003424:	3b01      	subs	r3, #1
 8003426:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d10f      	bne.n	800344c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003436:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003438:	429a      	cmp	r2, r3
 800343a:	d107      	bne.n	800344c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003446:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003448:	429a      	cmp	r2, r3
 800344a:	d001      	beq.n	8003450 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800

08003460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e041      	b.n	80034f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fe f954 	bl	8001734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3304      	adds	r3, #4
 800349c:	4619      	mov	r1, r3
 800349e:	4610      	mov	r0, r2
 80034a0:	f000 feb8 	bl	8004214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e041      	b.n	8003594 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d106      	bne.n	800352a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f839 	bl	800359c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2202      	movs	r2, #2
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3304      	adds	r3, #4
 800353a:	4619      	mov	r1, r3
 800353c:	4610      	mov	r0, r2
 800353e:	f000 fe69 	bl	8004214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d109      	bne.n	80035d4 <HAL_TIM_PWM_Start+0x24>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	bf14      	ite	ne
 80035cc:	2301      	movne	r3, #1
 80035ce:	2300      	moveq	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e022      	b.n	800361a <HAL_TIM_PWM_Start+0x6a>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d109      	bne.n	80035ee <HAL_TIM_PWM_Start+0x3e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	bf14      	ite	ne
 80035e6:	2301      	movne	r3, #1
 80035e8:	2300      	moveq	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	e015      	b.n	800361a <HAL_TIM_PWM_Start+0x6a>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d109      	bne.n	8003608 <HAL_TIM_PWM_Start+0x58>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	bf14      	ite	ne
 8003600:	2301      	movne	r3, #1
 8003602:	2300      	moveq	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e008      	b.n	800361a <HAL_TIM_PWM_Start+0x6a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	bf14      	ite	ne
 8003614:	2301      	movne	r3, #1
 8003616:	2300      	moveq	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e07c      	b.n	800371c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d104      	bne.n	8003632 <HAL_TIM_PWM_Start+0x82>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003630:	e013      	b.n	800365a <HAL_TIM_PWM_Start+0xaa>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b04      	cmp	r3, #4
 8003636:	d104      	bne.n	8003642 <HAL_TIM_PWM_Start+0x92>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003640:	e00b      	b.n	800365a <HAL_TIM_PWM_Start+0xaa>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d104      	bne.n	8003652 <HAL_TIM_PWM_Start+0xa2>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003650:	e003      	b.n	800365a <HAL_TIM_PWM_Start+0xaa>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2201      	movs	r2, #1
 8003660:	6839      	ldr	r1, [r7, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f001 f9f6 	bl	8004a54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a2d      	ldr	r2, [pc, #180]	@ (8003724 <HAL_TIM_PWM_Start+0x174>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d004      	beq.n	800367c <HAL_TIM_PWM_Start+0xcc>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2c      	ldr	r2, [pc, #176]	@ (8003728 <HAL_TIM_PWM_Start+0x178>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d101      	bne.n	8003680 <HAL_TIM_PWM_Start+0xd0>
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <HAL_TIM_PWM_Start+0xd2>
 8003680:	2300      	movs	r3, #0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d007      	beq.n	8003696 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003694:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a22      	ldr	r2, [pc, #136]	@ (8003724 <HAL_TIM_PWM_Start+0x174>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d022      	beq.n	80036e6 <HAL_TIM_PWM_Start+0x136>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a8:	d01d      	beq.n	80036e6 <HAL_TIM_PWM_Start+0x136>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1f      	ldr	r2, [pc, #124]	@ (800372c <HAL_TIM_PWM_Start+0x17c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d018      	beq.n	80036e6 <HAL_TIM_PWM_Start+0x136>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003730 <HAL_TIM_PWM_Start+0x180>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <HAL_TIM_PWM_Start+0x136>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003734 <HAL_TIM_PWM_Start+0x184>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00e      	beq.n	80036e6 <HAL_TIM_PWM_Start+0x136>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a16      	ldr	r2, [pc, #88]	@ (8003728 <HAL_TIM_PWM_Start+0x178>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d009      	beq.n	80036e6 <HAL_TIM_PWM_Start+0x136>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a18      	ldr	r2, [pc, #96]	@ (8003738 <HAL_TIM_PWM_Start+0x188>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d004      	beq.n	80036e6 <HAL_TIM_PWM_Start+0x136>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a16      	ldr	r2, [pc, #88]	@ (800373c <HAL_TIM_PWM_Start+0x18c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d111      	bne.n	800370a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b06      	cmp	r3, #6
 80036f6:	d010      	beq.n	800371a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003708:	e007      	b.n	800371a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 0201 	orr.w	r2, r2, #1
 8003718:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40010000 	.word	0x40010000
 8003728:	40010400 	.word	0x40010400
 800372c:	40000400 	.word	0x40000400
 8003730:	40000800 	.word	0x40000800
 8003734:	40000c00 	.word	0x40000c00
 8003738:	40014000 	.word	0x40014000
 800373c:	40001800 	.word	0x40001800

08003740 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2200      	movs	r2, #0
 8003750:	6839      	ldr	r1, [r7, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f001 f97e 	bl	8004a54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a2e      	ldr	r2, [pc, #184]	@ (8003818 <HAL_TIM_PWM_Stop+0xd8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d004      	beq.n	800376c <HAL_TIM_PWM_Stop+0x2c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a2d      	ldr	r2, [pc, #180]	@ (800381c <HAL_TIM_PWM_Stop+0xdc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d101      	bne.n	8003770 <HAL_TIM_PWM_Stop+0x30>
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <HAL_TIM_PWM_Stop+0x32>
 8003770:	2300      	movs	r3, #0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d017      	beq.n	80037a6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6a1a      	ldr	r2, [r3, #32]
 800377c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003780:	4013      	ands	r3, r2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10f      	bne.n	80037a6 <HAL_TIM_PWM_Stop+0x66>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6a1a      	ldr	r2, [r3, #32]
 800378c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003790:	4013      	ands	r3, r2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d107      	bne.n	80037a6 <HAL_TIM_PWM_Stop+0x66>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6a1a      	ldr	r2, [r3, #32]
 80037ac:	f241 1311 	movw	r3, #4369	@ 0x1111
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10f      	bne.n	80037d6 <HAL_TIM_PWM_Stop+0x96>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6a1a      	ldr	r2, [r3, #32]
 80037bc:	f240 4344 	movw	r3, #1092	@ 0x444
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d107      	bne.n	80037d6 <HAL_TIM_PWM_Stop+0x96>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0201 	bic.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d104      	bne.n	80037e6 <HAL_TIM_PWM_Stop+0xa6>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037e4:	e013      	b.n	800380e <HAL_TIM_PWM_Stop+0xce>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d104      	bne.n	80037f6 <HAL_TIM_PWM_Stop+0xb6>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037f4:	e00b      	b.n	800380e <HAL_TIM_PWM_Stop+0xce>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d104      	bne.n	8003806 <HAL_TIM_PWM_Stop+0xc6>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003804:	e003      	b.n	800380e <HAL_TIM_PWM_Stop+0xce>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40010000 	.word	0x40010000
 800381c:	40010400 	.word	0x40010400

08003820 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e041      	b.n	80038b6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fd ff24 	bl	8001694 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f000 fcd8 	bl	8004214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d104      	bne.n	80038de <HAL_TIM_IC_Start_IT+0x1e>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	e013      	b.n	8003906 <HAL_TIM_IC_Start_IT+0x46>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d104      	bne.n	80038ee <HAL_TIM_IC_Start_IT+0x2e>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	e00b      	b.n	8003906 <HAL_TIM_IC_Start_IT+0x46>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d104      	bne.n	80038fe <HAL_TIM_IC_Start_IT+0x3e>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	e003      	b.n	8003906 <HAL_TIM_IC_Start_IT+0x46>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003904:	b2db      	uxtb	r3, r3
 8003906:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d104      	bne.n	8003918 <HAL_TIM_IC_Start_IT+0x58>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003914:	b2db      	uxtb	r3, r3
 8003916:	e013      	b.n	8003940 <HAL_TIM_IC_Start_IT+0x80>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b04      	cmp	r3, #4
 800391c:	d104      	bne.n	8003928 <HAL_TIM_IC_Start_IT+0x68>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e00b      	b.n	8003940 <HAL_TIM_IC_Start_IT+0x80>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b08      	cmp	r3, #8
 800392c:	d104      	bne.n	8003938 <HAL_TIM_IC_Start_IT+0x78>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e003      	b.n	8003940 <HAL_TIM_IC_Start_IT+0x80>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800393e:	b2db      	uxtb	r3, r3
 8003940:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003942:	7bbb      	ldrb	r3, [r7, #14]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d102      	bne.n	800394e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003948:	7b7b      	ldrb	r3, [r7, #13]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d001      	beq.n	8003952 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e0cc      	b.n	8003aec <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d104      	bne.n	8003962 <HAL_TIM_IC_Start_IT+0xa2>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003960:	e013      	b.n	800398a <HAL_TIM_IC_Start_IT+0xca>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b04      	cmp	r3, #4
 8003966:	d104      	bne.n	8003972 <HAL_TIM_IC_Start_IT+0xb2>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003970:	e00b      	b.n	800398a <HAL_TIM_IC_Start_IT+0xca>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b08      	cmp	r3, #8
 8003976:	d104      	bne.n	8003982 <HAL_TIM_IC_Start_IT+0xc2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003980:	e003      	b.n	800398a <HAL_TIM_IC_Start_IT+0xca>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2202      	movs	r2, #2
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d104      	bne.n	800399a <HAL_TIM_IC_Start_IT+0xda>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003998:	e013      	b.n	80039c2 <HAL_TIM_IC_Start_IT+0x102>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b04      	cmp	r3, #4
 800399e:	d104      	bne.n	80039aa <HAL_TIM_IC_Start_IT+0xea>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039a8:	e00b      	b.n	80039c2 <HAL_TIM_IC_Start_IT+0x102>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_IC_Start_IT+0xfa>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039b8:	e003      	b.n	80039c2 <HAL_TIM_IC_Start_IT+0x102>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b0c      	cmp	r3, #12
 80039c6:	d841      	bhi.n	8003a4c <HAL_TIM_IC_Start_IT+0x18c>
 80039c8:	a201      	add	r2, pc, #4	@ (adr r2, 80039d0 <HAL_TIM_IC_Start_IT+0x110>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	08003a05 	.word	0x08003a05
 80039d4:	08003a4d 	.word	0x08003a4d
 80039d8:	08003a4d 	.word	0x08003a4d
 80039dc:	08003a4d 	.word	0x08003a4d
 80039e0:	08003a17 	.word	0x08003a17
 80039e4:	08003a4d 	.word	0x08003a4d
 80039e8:	08003a4d 	.word	0x08003a4d
 80039ec:	08003a4d 	.word	0x08003a4d
 80039f0:	08003a29 	.word	0x08003a29
 80039f4:	08003a4d 	.word	0x08003a4d
 80039f8:	08003a4d 	.word	0x08003a4d
 80039fc:	08003a4d 	.word	0x08003a4d
 8003a00:	08003a3b 	.word	0x08003a3b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0202 	orr.w	r2, r2, #2
 8003a12:	60da      	str	r2, [r3, #12]
      break;
 8003a14:	e01d      	b.n	8003a52 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f042 0204 	orr.w	r2, r2, #4
 8003a24:	60da      	str	r2, [r3, #12]
      break;
 8003a26:	e014      	b.n	8003a52 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0208 	orr.w	r2, r2, #8
 8003a36:	60da      	str	r2, [r3, #12]
      break;
 8003a38:	e00b      	b.n	8003a52 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0210 	orr.w	r2, r2, #16
 8003a48:	60da      	str	r2, [r3, #12]
      break;
 8003a4a:	e002      	b.n	8003a52 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a50:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d148      	bne.n	8003aea <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	6839      	ldr	r1, [r7, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 fff7 	bl	8004a54 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a22      	ldr	r2, [pc, #136]	@ (8003af4 <HAL_TIM_IC_Start_IT+0x234>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d022      	beq.n	8003ab6 <HAL_TIM_IC_Start_IT+0x1f6>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a78:	d01d      	beq.n	8003ab6 <HAL_TIM_IC_Start_IT+0x1f6>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1e      	ldr	r2, [pc, #120]	@ (8003af8 <HAL_TIM_IC_Start_IT+0x238>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d018      	beq.n	8003ab6 <HAL_TIM_IC_Start_IT+0x1f6>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1c      	ldr	r2, [pc, #112]	@ (8003afc <HAL_TIM_IC_Start_IT+0x23c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_TIM_IC_Start_IT+0x1f6>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a1b      	ldr	r2, [pc, #108]	@ (8003b00 <HAL_TIM_IC_Start_IT+0x240>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00e      	beq.n	8003ab6 <HAL_TIM_IC_Start_IT+0x1f6>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a19      	ldr	r2, [pc, #100]	@ (8003b04 <HAL_TIM_IC_Start_IT+0x244>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d009      	beq.n	8003ab6 <HAL_TIM_IC_Start_IT+0x1f6>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a18      	ldr	r2, [pc, #96]	@ (8003b08 <HAL_TIM_IC_Start_IT+0x248>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_TIM_IC_Start_IT+0x1f6>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a16      	ldr	r2, [pc, #88]	@ (8003b0c <HAL_TIM_IC_Start_IT+0x24c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d111      	bne.n	8003ada <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b06      	cmp	r3, #6
 8003ac6:	d010      	beq.n	8003aea <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad8:	e007      	b.n	8003aea <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40010000 	.word	0x40010000
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40000800 	.word	0x40000800
 8003b00:	40000c00 	.word	0x40000c00
 8003b04:	40010400 	.word	0x40010400
 8003b08:	40014000 	.word	0x40014000
 8003b0c:	40001800 	.word	0x40001800

08003b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d020      	beq.n	8003b74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01b      	beq.n	8003b74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0202 	mvn.w	r2, #2
 8003b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fd fa0c 	bl	8000f78 <HAL_TIM_IC_CaptureCallback>
 8003b60:	e005      	b.n	8003b6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 fb38 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fb3f 	bl	80041ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d020      	beq.n	8003bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01b      	beq.n	8003bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0204 	mvn.w	r2, #4
 8003b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2202      	movs	r2, #2
 8003b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fd f9e6 	bl	8000f78 <HAL_TIM_IC_CaptureCallback>
 8003bac:	e005      	b.n	8003bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fb12 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fb19 	bl	80041ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d020      	beq.n	8003c0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01b      	beq.n	8003c0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f06f 0208 	mvn.w	r2, #8
 8003bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2204      	movs	r2, #4
 8003be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7fd f9c0 	bl	8000f78 <HAL_TIM_IC_CaptureCallback>
 8003bf8:	e005      	b.n	8003c06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 faec 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 faf3 	bl	80041ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d020      	beq.n	8003c58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01b      	beq.n	8003c58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0210 	mvn.w	r2, #16
 8003c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2208      	movs	r2, #8
 8003c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fd f99a 	bl	8000f78 <HAL_TIM_IC_CaptureCallback>
 8003c44:	e005      	b.n	8003c52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fac6 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 facd 	bl	80041ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00c      	beq.n	8003c7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d007      	beq.n	8003c7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0201 	mvn.w	r2, #1
 8003c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 faa4 	bl	80041c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00c      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d007      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 ff86 	bl	8004bac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00c      	beq.n	8003cc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d007      	beq.n	8003cc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fa9e 	bl	8004200 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00c      	beq.n	8003ce8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d007      	beq.n	8003ce8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0220 	mvn.w	r2, #32
 8003ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 ff58 	bl	8004b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_TIM_IC_ConfigChannel+0x1e>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e088      	b.n	8003e20 <HAL_TIM_IC_ConfigChannel+0x130>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d11b      	bne.n	8003d54 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003d2c:	f000 fcce 	bl	80046cc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 020c 	bic.w	r2, r2, #12
 8003d3e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6999      	ldr	r1, [r3, #24]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	619a      	str	r2, [r3, #24]
 8003d52:	e060      	b.n	8003e16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d11c      	bne.n	8003d94 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003d6a:	f000 fd52 	bl	8004812 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699a      	ldr	r2, [r3, #24]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003d7c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6999      	ldr	r1, [r3, #24]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	021a      	lsls	r2, r3, #8
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	619a      	str	r2, [r3, #24]
 8003d92:	e040      	b.n	8003e16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d11b      	bne.n	8003dd2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003daa:	f000 fd9f 	bl	80048ec <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69da      	ldr	r2, [r3, #28]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 020c 	bic.w	r2, r2, #12
 8003dbc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69d9      	ldr	r1, [r3, #28]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	61da      	str	r2, [r3, #28]
 8003dd0:	e021      	b.n	8003e16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b0c      	cmp	r3, #12
 8003dd6:	d11c      	bne.n	8003e12 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003de8:	f000 fdbc 	bl	8004964 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	69da      	ldr	r2, [r3, #28]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003dfa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	69d9      	ldr	r1, [r3, #28]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	021a      	lsls	r2, r3, #8
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	61da      	str	r2, [r3, #28]
 8003e10:	e001      	b.n	8003e16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e0ae      	b.n	8003fa4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b0c      	cmp	r3, #12
 8003e52:	f200 809f 	bhi.w	8003f94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e56:	a201      	add	r2, pc, #4	@ (adr r2, 8003e5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5c:	08003e91 	.word	0x08003e91
 8003e60:	08003f95 	.word	0x08003f95
 8003e64:	08003f95 	.word	0x08003f95
 8003e68:	08003f95 	.word	0x08003f95
 8003e6c:	08003ed1 	.word	0x08003ed1
 8003e70:	08003f95 	.word	0x08003f95
 8003e74:	08003f95 	.word	0x08003f95
 8003e78:	08003f95 	.word	0x08003f95
 8003e7c:	08003f13 	.word	0x08003f13
 8003e80:	08003f95 	.word	0x08003f95
 8003e84:	08003f95 	.word	0x08003f95
 8003e88:	08003f95 	.word	0x08003f95
 8003e8c:	08003f53 	.word	0x08003f53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fa68 	bl	800436c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0208 	orr.w	r2, r2, #8
 8003eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0204 	bic.w	r2, r2, #4
 8003eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6999      	ldr	r1, [r3, #24]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	619a      	str	r2, [r3, #24]
      break;
 8003ece:	e064      	b.n	8003f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fab8 	bl	800444c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6999      	ldr	r1, [r3, #24]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	021a      	lsls	r2, r3, #8
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	619a      	str	r2, [r3, #24]
      break;
 8003f10:	e043      	b.n	8003f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 fb0d 	bl	8004538 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0208 	orr.w	r2, r2, #8
 8003f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0204 	bic.w	r2, r2, #4
 8003f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69d9      	ldr	r1, [r3, #28]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	61da      	str	r2, [r3, #28]
      break;
 8003f50:	e023      	b.n	8003f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fb61 	bl	8004620 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69da      	ldr	r2, [r3, #28]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69d9      	ldr	r1, [r3, #28]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	021a      	lsls	r2, r3, #8
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	61da      	str	r2, [r3, #28]
      break;
 8003f92:	e002      	b.n	8003f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	75fb      	strb	r3, [r7, #23]
      break;
 8003f98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_TIM_ConfigClockSource+0x1c>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e0b4      	b.n	8004132 <HAL_TIM_ConfigClockSource+0x186>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004000:	d03e      	beq.n	8004080 <HAL_TIM_ConfigClockSource+0xd4>
 8004002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004006:	f200 8087 	bhi.w	8004118 <HAL_TIM_ConfigClockSource+0x16c>
 800400a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800400e:	f000 8086 	beq.w	800411e <HAL_TIM_ConfigClockSource+0x172>
 8004012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004016:	d87f      	bhi.n	8004118 <HAL_TIM_ConfigClockSource+0x16c>
 8004018:	2b70      	cmp	r3, #112	@ 0x70
 800401a:	d01a      	beq.n	8004052 <HAL_TIM_ConfigClockSource+0xa6>
 800401c:	2b70      	cmp	r3, #112	@ 0x70
 800401e:	d87b      	bhi.n	8004118 <HAL_TIM_ConfigClockSource+0x16c>
 8004020:	2b60      	cmp	r3, #96	@ 0x60
 8004022:	d050      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0x11a>
 8004024:	2b60      	cmp	r3, #96	@ 0x60
 8004026:	d877      	bhi.n	8004118 <HAL_TIM_ConfigClockSource+0x16c>
 8004028:	2b50      	cmp	r3, #80	@ 0x50
 800402a:	d03c      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0xfa>
 800402c:	2b50      	cmp	r3, #80	@ 0x50
 800402e:	d873      	bhi.n	8004118 <HAL_TIM_ConfigClockSource+0x16c>
 8004030:	2b40      	cmp	r3, #64	@ 0x40
 8004032:	d058      	beq.n	80040e6 <HAL_TIM_ConfigClockSource+0x13a>
 8004034:	2b40      	cmp	r3, #64	@ 0x40
 8004036:	d86f      	bhi.n	8004118 <HAL_TIM_ConfigClockSource+0x16c>
 8004038:	2b30      	cmp	r3, #48	@ 0x30
 800403a:	d064      	beq.n	8004106 <HAL_TIM_ConfigClockSource+0x15a>
 800403c:	2b30      	cmp	r3, #48	@ 0x30
 800403e:	d86b      	bhi.n	8004118 <HAL_TIM_ConfigClockSource+0x16c>
 8004040:	2b20      	cmp	r3, #32
 8004042:	d060      	beq.n	8004106 <HAL_TIM_ConfigClockSource+0x15a>
 8004044:	2b20      	cmp	r3, #32
 8004046:	d867      	bhi.n	8004118 <HAL_TIM_ConfigClockSource+0x16c>
 8004048:	2b00      	cmp	r3, #0
 800404a:	d05c      	beq.n	8004106 <HAL_TIM_ConfigClockSource+0x15a>
 800404c:	2b10      	cmp	r3, #16
 800404e:	d05a      	beq.n	8004106 <HAL_TIM_ConfigClockSource+0x15a>
 8004050:	e062      	b.n	8004118 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004062:	f000 fcd7 	bl	8004a14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004074:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	609a      	str	r2, [r3, #8]
      break;
 800407e:	e04f      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004090:	f000 fcc0 	bl	8004a14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040a2:	609a      	str	r2, [r3, #8]
      break;
 80040a4:	e03c      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040b2:	461a      	mov	r2, r3
 80040b4:	f000 fb7e 	bl	80047b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2150      	movs	r1, #80	@ 0x50
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fc8d 	bl	80049de <TIM_ITRx_SetConfig>
      break;
 80040c4:	e02c      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040d2:	461a      	mov	r2, r3
 80040d4:	f000 fbda 	bl	800488c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2160      	movs	r1, #96	@ 0x60
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fc7d 	bl	80049de <TIM_ITRx_SetConfig>
      break;
 80040e4:	e01c      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f2:	461a      	mov	r2, r3
 80040f4:	f000 fb5e 	bl	80047b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2140      	movs	r1, #64	@ 0x40
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fc6d 	bl	80049de <TIM_ITRx_SetConfig>
      break;
 8004104:	e00c      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4619      	mov	r1, r3
 8004110:	4610      	mov	r0, r2
 8004112:	f000 fc64 	bl	80049de <TIM_ITRx_SetConfig>
      break;
 8004116:	e003      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]
      break;
 800411c:	e000      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800411e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004130:	7bfb      	ldrb	r3, [r7, #15]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b0c      	cmp	r3, #12
 800414e:	d831      	bhi.n	80041b4 <HAL_TIM_ReadCapturedValue+0x78>
 8004150:	a201      	add	r2, pc, #4	@ (adr r2, 8004158 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004156:	bf00      	nop
 8004158:	0800418d 	.word	0x0800418d
 800415c:	080041b5 	.word	0x080041b5
 8004160:	080041b5 	.word	0x080041b5
 8004164:	080041b5 	.word	0x080041b5
 8004168:	08004197 	.word	0x08004197
 800416c:	080041b5 	.word	0x080041b5
 8004170:	080041b5 	.word	0x080041b5
 8004174:	080041b5 	.word	0x080041b5
 8004178:	080041a1 	.word	0x080041a1
 800417c:	080041b5 	.word	0x080041b5
 8004180:	080041b5 	.word	0x080041b5
 8004184:	080041b5 	.word	0x080041b5
 8004188:	080041ab 	.word	0x080041ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004192:	60fb      	str	r3, [r7, #12]

      break;
 8004194:	e00f      	b.n	80041b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419c:	60fb      	str	r3, [r7, #12]

      break;
 800419e:	e00a      	b.n	80041b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a6:	60fb      	str	r3, [r7, #12]

      break;
 80041a8:	e005      	b.n	80041b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b0:	60fb      	str	r3, [r7, #12]

      break;
 80041b2:	e000      	b.n	80041b6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80041b4:	bf00      	nop
  }

  return tmpreg;
 80041b6:	68fb      	ldr	r3, [r7, #12]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a46      	ldr	r2, [pc, #280]	@ (8004340 <TIM_Base_SetConfig+0x12c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d013      	beq.n	8004254 <TIM_Base_SetConfig+0x40>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004232:	d00f      	beq.n	8004254 <TIM_Base_SetConfig+0x40>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a43      	ldr	r2, [pc, #268]	@ (8004344 <TIM_Base_SetConfig+0x130>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00b      	beq.n	8004254 <TIM_Base_SetConfig+0x40>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a42      	ldr	r2, [pc, #264]	@ (8004348 <TIM_Base_SetConfig+0x134>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d007      	beq.n	8004254 <TIM_Base_SetConfig+0x40>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a41      	ldr	r2, [pc, #260]	@ (800434c <TIM_Base_SetConfig+0x138>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d003      	beq.n	8004254 <TIM_Base_SetConfig+0x40>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a40      	ldr	r2, [pc, #256]	@ (8004350 <TIM_Base_SetConfig+0x13c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d108      	bne.n	8004266 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800425a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a35      	ldr	r2, [pc, #212]	@ (8004340 <TIM_Base_SetConfig+0x12c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d02b      	beq.n	80042c6 <TIM_Base_SetConfig+0xb2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004274:	d027      	beq.n	80042c6 <TIM_Base_SetConfig+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a32      	ldr	r2, [pc, #200]	@ (8004344 <TIM_Base_SetConfig+0x130>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d023      	beq.n	80042c6 <TIM_Base_SetConfig+0xb2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a31      	ldr	r2, [pc, #196]	@ (8004348 <TIM_Base_SetConfig+0x134>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d01f      	beq.n	80042c6 <TIM_Base_SetConfig+0xb2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a30      	ldr	r2, [pc, #192]	@ (800434c <TIM_Base_SetConfig+0x138>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d01b      	beq.n	80042c6 <TIM_Base_SetConfig+0xb2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a2f      	ldr	r2, [pc, #188]	@ (8004350 <TIM_Base_SetConfig+0x13c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d017      	beq.n	80042c6 <TIM_Base_SetConfig+0xb2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a2e      	ldr	r2, [pc, #184]	@ (8004354 <TIM_Base_SetConfig+0x140>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d013      	beq.n	80042c6 <TIM_Base_SetConfig+0xb2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004358 <TIM_Base_SetConfig+0x144>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00f      	beq.n	80042c6 <TIM_Base_SetConfig+0xb2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a2c      	ldr	r2, [pc, #176]	@ (800435c <TIM_Base_SetConfig+0x148>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00b      	beq.n	80042c6 <TIM_Base_SetConfig+0xb2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004360 <TIM_Base_SetConfig+0x14c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d007      	beq.n	80042c6 <TIM_Base_SetConfig+0xb2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004364 <TIM_Base_SetConfig+0x150>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d003      	beq.n	80042c6 <TIM_Base_SetConfig+0xb2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a29      	ldr	r2, [pc, #164]	@ (8004368 <TIM_Base_SetConfig+0x154>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d108      	bne.n	80042d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a10      	ldr	r2, [pc, #64]	@ (8004340 <TIM_Base_SetConfig+0x12c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d003      	beq.n	800430c <TIM_Base_SetConfig+0xf8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a12      	ldr	r2, [pc, #72]	@ (8004350 <TIM_Base_SetConfig+0x13c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d103      	bne.n	8004314 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b01      	cmp	r3, #1
 8004324:	d105      	bne.n	8004332 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f023 0201 	bic.w	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	611a      	str	r2, [r3, #16]
  }
}
 8004332:	bf00      	nop
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40010000 	.word	0x40010000
 8004344:	40000400 	.word	0x40000400
 8004348:	40000800 	.word	0x40000800
 800434c:	40000c00 	.word	0x40000c00
 8004350:	40010400 	.word	0x40010400
 8004354:	40014000 	.word	0x40014000
 8004358:	40014400 	.word	0x40014400
 800435c:	40014800 	.word	0x40014800
 8004360:	40001800 	.word	0x40001800
 8004364:	40001c00 	.word	0x40001c00
 8004368:	40002000 	.word	0x40002000

0800436c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f023 0201 	bic.w	r2, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800439a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0303 	bic.w	r3, r3, #3
 80043a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f023 0302 	bic.w	r3, r3, #2
 80043b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a20      	ldr	r2, [pc, #128]	@ (8004444 <TIM_OC1_SetConfig+0xd8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d003      	beq.n	80043d0 <TIM_OC1_SetConfig+0x64>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a1f      	ldr	r2, [pc, #124]	@ (8004448 <TIM_OC1_SetConfig+0xdc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d10c      	bne.n	80043ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f023 0308 	bic.w	r3, r3, #8
 80043d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f023 0304 	bic.w	r3, r3, #4
 80043e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a15      	ldr	r2, [pc, #84]	@ (8004444 <TIM_OC1_SetConfig+0xd8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d003      	beq.n	80043fa <TIM_OC1_SetConfig+0x8e>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a14      	ldr	r2, [pc, #80]	@ (8004448 <TIM_OC1_SetConfig+0xdc>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d111      	bne.n	800441e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	621a      	str	r2, [r3, #32]
}
 8004438:	bf00      	nop
 800443a:	371c      	adds	r7, #28
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	40010000 	.word	0x40010000
 8004448:	40010400 	.word	0x40010400

0800444c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	f023 0210 	bic.w	r2, r3, #16
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800447a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	021b      	lsls	r3, r3, #8
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4313      	orrs	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f023 0320 	bic.w	r3, r3, #32
 8004496:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a22      	ldr	r2, [pc, #136]	@ (8004530 <TIM_OC2_SetConfig+0xe4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d003      	beq.n	80044b4 <TIM_OC2_SetConfig+0x68>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a21      	ldr	r2, [pc, #132]	@ (8004534 <TIM_OC2_SetConfig+0xe8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d10d      	bne.n	80044d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a17      	ldr	r2, [pc, #92]	@ (8004530 <TIM_OC2_SetConfig+0xe4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d003      	beq.n	80044e0 <TIM_OC2_SetConfig+0x94>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a16      	ldr	r2, [pc, #88]	@ (8004534 <TIM_OC2_SetConfig+0xe8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d113      	bne.n	8004508 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	621a      	str	r2, [r3, #32]
}
 8004522:	bf00      	nop
 8004524:	371c      	adds	r7, #28
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40010000 	.word	0x40010000
 8004534:	40010400 	.word	0x40010400

08004538 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0303 	bic.w	r3, r3, #3
 800456e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	021b      	lsls	r3, r3, #8
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a21      	ldr	r2, [pc, #132]	@ (8004618 <TIM_OC3_SetConfig+0xe0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d003      	beq.n	800459e <TIM_OC3_SetConfig+0x66>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a20      	ldr	r2, [pc, #128]	@ (800461c <TIM_OC3_SetConfig+0xe4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d10d      	bne.n	80045ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a16      	ldr	r2, [pc, #88]	@ (8004618 <TIM_OC3_SetConfig+0xe0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <TIM_OC3_SetConfig+0x92>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a15      	ldr	r2, [pc, #84]	@ (800461c <TIM_OC3_SetConfig+0xe4>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d113      	bne.n	80045f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	621a      	str	r2, [r3, #32]
}
 800460c:	bf00      	nop
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40010000 	.word	0x40010000
 800461c:	40010400 	.word	0x40010400

08004620 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800464e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800466a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	031b      	lsls	r3, r3, #12
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a12      	ldr	r2, [pc, #72]	@ (80046c4 <TIM_OC4_SetConfig+0xa4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d003      	beq.n	8004688 <TIM_OC4_SetConfig+0x68>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a11      	ldr	r2, [pc, #68]	@ (80046c8 <TIM_OC4_SetConfig+0xa8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d109      	bne.n	800469c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800468e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	019b      	lsls	r3, r3, #6
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	621a      	str	r2, [r3, #32]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40010000 	.word	0x40010000
 80046c8:	40010400 	.word	0x40010400

080046cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	f023 0201 	bic.w	r2, r3, #1
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4a28      	ldr	r2, [pc, #160]	@ (8004798 <TIM_TI1_SetConfig+0xcc>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d01b      	beq.n	8004732 <TIM_TI1_SetConfig+0x66>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004700:	d017      	beq.n	8004732 <TIM_TI1_SetConfig+0x66>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4a25      	ldr	r2, [pc, #148]	@ (800479c <TIM_TI1_SetConfig+0xd0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d013      	beq.n	8004732 <TIM_TI1_SetConfig+0x66>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4a24      	ldr	r2, [pc, #144]	@ (80047a0 <TIM_TI1_SetConfig+0xd4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00f      	beq.n	8004732 <TIM_TI1_SetConfig+0x66>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4a23      	ldr	r2, [pc, #140]	@ (80047a4 <TIM_TI1_SetConfig+0xd8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00b      	beq.n	8004732 <TIM_TI1_SetConfig+0x66>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4a22      	ldr	r2, [pc, #136]	@ (80047a8 <TIM_TI1_SetConfig+0xdc>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d007      	beq.n	8004732 <TIM_TI1_SetConfig+0x66>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4a21      	ldr	r2, [pc, #132]	@ (80047ac <TIM_TI1_SetConfig+0xe0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d003      	beq.n	8004732 <TIM_TI1_SetConfig+0x66>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4a20      	ldr	r2, [pc, #128]	@ (80047b0 <TIM_TI1_SetConfig+0xe4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d101      	bne.n	8004736 <TIM_TI1_SetConfig+0x6a>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <TIM_TI1_SetConfig+0x6c>
 8004736:	2300      	movs	r3, #0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d008      	beq.n	800474e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f023 0303 	bic.w	r3, r3, #3
 8004742:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	e003      	b.n	8004756 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800475c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	b2db      	uxtb	r3, r3
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f023 030a 	bic.w	r3, r3, #10
 8004770:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f003 030a 	and.w	r3, r3, #10
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	621a      	str	r2, [r3, #32]
}
 800478a:	bf00      	nop
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40010000 	.word	0x40010000
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800
 80047a4:	40000c00 	.word	0x40000c00
 80047a8:	40010400 	.word	0x40010400
 80047ac:	40014000 	.word	0x40014000
 80047b0:	40001800 	.word	0x40001800

080047b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f023 0201 	bic.w	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f023 030a 	bic.w	r3, r3, #10
 80047f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	621a      	str	r2, [r3, #32]
}
 8004806:	bf00      	nop
 8004808:	371c      	adds	r7, #28
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004812:	b480      	push	{r7}
 8004814:	b087      	sub	sp, #28
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
 800481e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	f023 0210 	bic.w	r2, r3, #16
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800483e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	4313      	orrs	r3, r2
 8004848:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004850:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	031b      	lsls	r3, r3, #12
 8004856:	b29b      	uxth	r3, r3
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004864:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	621a      	str	r2, [r3, #32]
}
 8004880:	bf00      	nop
 8004882:	371c      	adds	r7, #28
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f023 0210 	bic.w	r2, r3, #16
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	031b      	lsls	r3, r3, #12
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	621a      	str	r2, [r3, #32]
}
 80048e0:	bf00      	nop
 80048e2:	371c      	adds	r7, #28
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f023 0303 	bic.w	r3, r3, #3
 8004918:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004928:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	b2db      	uxtb	r3, r3
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4313      	orrs	r3, r2
 8004934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800493c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	021b      	lsls	r3, r3, #8
 8004942:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4313      	orrs	r3, r2
 800494a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	621a      	str	r2, [r3, #32]
}
 8004958:	bf00      	nop
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004990:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	021b      	lsls	r3, r3, #8
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	031b      	lsls	r3, r3, #12
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80049b6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	031b      	lsls	r3, r3, #12
 80049bc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049de:	b480      	push	{r7}
 80049e0:	b085      	sub	sp, #20
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f043 0307 	orr.w	r3, r3, #7
 8004a00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	609a      	str	r2, [r3, #8]
}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	021a      	lsls	r2, r3, #8
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	609a      	str	r2, [r3, #8]
}
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f003 031f 	and.w	r3, r3, #31
 8004a66:	2201      	movs	r2, #1
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a1a      	ldr	r2, [r3, #32]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	43db      	mvns	r3, r3
 8004a76:	401a      	ands	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a1a      	ldr	r2, [r3, #32]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 031f 	and.w	r3, r3, #31
 8004a86:	6879      	ldr	r1, [r7, #4]
 8004a88:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	621a      	str	r2, [r3, #32]
}
 8004a92:	bf00      	nop
 8004a94:	371c      	adds	r7, #28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
	...

08004aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e05a      	b.n	8004b6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a21      	ldr	r2, [pc, #132]	@ (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d022      	beq.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b04:	d01d      	beq.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a1d      	ldr	r2, [pc, #116]	@ (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d018      	beq.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a1b      	ldr	r2, [pc, #108]	@ (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d013      	beq.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00e      	beq.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a18      	ldr	r2, [pc, #96]	@ (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d009      	beq.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a17      	ldr	r2, [pc, #92]	@ (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d004      	beq.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a15      	ldr	r2, [pc, #84]	@ (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d10c      	bne.n	8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	40010000 	.word	0x40010000
 8004b80:	40000400 	.word	0x40000400
 8004b84:	40000800 	.word	0x40000800
 8004b88:	40000c00 	.word	0x40000c00
 8004b8c:	40010400 	.word	0x40010400
 8004b90:	40014000 	.word	0x40014000
 8004b94:	40001800 	.word	0x40001800

08004b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <siprintf>:
 8004bc0:	b40e      	push	{r1, r2, r3}
 8004bc2:	b500      	push	{lr}
 8004bc4:	b09c      	sub	sp, #112	@ 0x70
 8004bc6:	ab1d      	add	r3, sp, #116	@ 0x74
 8004bc8:	9002      	str	r0, [sp, #8]
 8004bca:	9006      	str	r0, [sp, #24]
 8004bcc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004bd0:	4809      	ldr	r0, [pc, #36]	@ (8004bf8 <siprintf+0x38>)
 8004bd2:	9107      	str	r1, [sp, #28]
 8004bd4:	9104      	str	r1, [sp, #16]
 8004bd6:	4909      	ldr	r1, [pc, #36]	@ (8004bfc <siprintf+0x3c>)
 8004bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bdc:	9105      	str	r1, [sp, #20]
 8004bde:	6800      	ldr	r0, [r0, #0]
 8004be0:	9301      	str	r3, [sp, #4]
 8004be2:	a902      	add	r1, sp, #8
 8004be4:	f000 f994 	bl	8004f10 <_svfiprintf_r>
 8004be8:	9b02      	ldr	r3, [sp, #8]
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	b01c      	add	sp, #112	@ 0x70
 8004bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bf4:	b003      	add	sp, #12
 8004bf6:	4770      	bx	lr
 8004bf8:	2000000c 	.word	0x2000000c
 8004bfc:	ffff0208 	.word	0xffff0208

08004c00 <memset>:
 8004c00:	4402      	add	r2, r0
 8004c02:	4603      	mov	r3, r0
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d100      	bne.n	8004c0a <memset+0xa>
 8004c08:	4770      	bx	lr
 8004c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c0e:	e7f9      	b.n	8004c04 <memset+0x4>

08004c10 <__errno>:
 8004c10:	4b01      	ldr	r3, [pc, #4]	@ (8004c18 <__errno+0x8>)
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	2000000c 	.word	0x2000000c

08004c1c <__libc_init_array>:
 8004c1c:	b570      	push	{r4, r5, r6, lr}
 8004c1e:	4d0d      	ldr	r5, [pc, #52]	@ (8004c54 <__libc_init_array+0x38>)
 8004c20:	4c0d      	ldr	r4, [pc, #52]	@ (8004c58 <__libc_init_array+0x3c>)
 8004c22:	1b64      	subs	r4, r4, r5
 8004c24:	10a4      	asrs	r4, r4, #2
 8004c26:	2600      	movs	r6, #0
 8004c28:	42a6      	cmp	r6, r4
 8004c2a:	d109      	bne.n	8004c40 <__libc_init_array+0x24>
 8004c2c:	4d0b      	ldr	r5, [pc, #44]	@ (8004c5c <__libc_init_array+0x40>)
 8004c2e:	4c0c      	ldr	r4, [pc, #48]	@ (8004c60 <__libc_init_array+0x44>)
 8004c30:	f000 fc66 	bl	8005500 <_init>
 8004c34:	1b64      	subs	r4, r4, r5
 8004c36:	10a4      	asrs	r4, r4, #2
 8004c38:	2600      	movs	r6, #0
 8004c3a:	42a6      	cmp	r6, r4
 8004c3c:	d105      	bne.n	8004c4a <__libc_init_array+0x2e>
 8004c3e:	bd70      	pop	{r4, r5, r6, pc}
 8004c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c44:	4798      	blx	r3
 8004c46:	3601      	adds	r6, #1
 8004c48:	e7ee      	b.n	8004c28 <__libc_init_array+0xc>
 8004c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c4e:	4798      	blx	r3
 8004c50:	3601      	adds	r6, #1
 8004c52:	e7f2      	b.n	8004c3a <__libc_init_array+0x1e>
 8004c54:	08005588 	.word	0x08005588
 8004c58:	08005588 	.word	0x08005588
 8004c5c:	08005588 	.word	0x08005588
 8004c60:	0800558c 	.word	0x0800558c

08004c64 <__retarget_lock_acquire_recursive>:
 8004c64:	4770      	bx	lr

08004c66 <__retarget_lock_release_recursive>:
 8004c66:	4770      	bx	lr

08004c68 <_free_r>:
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	4605      	mov	r5, r0
 8004c6c:	2900      	cmp	r1, #0
 8004c6e:	d041      	beq.n	8004cf4 <_free_r+0x8c>
 8004c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c74:	1f0c      	subs	r4, r1, #4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bfb8      	it	lt
 8004c7a:	18e4      	addlt	r4, r4, r3
 8004c7c:	f000 f8e0 	bl	8004e40 <__malloc_lock>
 8004c80:	4a1d      	ldr	r2, [pc, #116]	@ (8004cf8 <_free_r+0x90>)
 8004c82:	6813      	ldr	r3, [r2, #0]
 8004c84:	b933      	cbnz	r3, 8004c94 <_free_r+0x2c>
 8004c86:	6063      	str	r3, [r4, #4]
 8004c88:	6014      	str	r4, [r2, #0]
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c90:	f000 b8dc 	b.w	8004e4c <__malloc_unlock>
 8004c94:	42a3      	cmp	r3, r4
 8004c96:	d908      	bls.n	8004caa <_free_r+0x42>
 8004c98:	6820      	ldr	r0, [r4, #0]
 8004c9a:	1821      	adds	r1, r4, r0
 8004c9c:	428b      	cmp	r3, r1
 8004c9e:	bf01      	itttt	eq
 8004ca0:	6819      	ldreq	r1, [r3, #0]
 8004ca2:	685b      	ldreq	r3, [r3, #4]
 8004ca4:	1809      	addeq	r1, r1, r0
 8004ca6:	6021      	streq	r1, [r4, #0]
 8004ca8:	e7ed      	b.n	8004c86 <_free_r+0x1e>
 8004caa:	461a      	mov	r2, r3
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	b10b      	cbz	r3, 8004cb4 <_free_r+0x4c>
 8004cb0:	42a3      	cmp	r3, r4
 8004cb2:	d9fa      	bls.n	8004caa <_free_r+0x42>
 8004cb4:	6811      	ldr	r1, [r2, #0]
 8004cb6:	1850      	adds	r0, r2, r1
 8004cb8:	42a0      	cmp	r0, r4
 8004cba:	d10b      	bne.n	8004cd4 <_free_r+0x6c>
 8004cbc:	6820      	ldr	r0, [r4, #0]
 8004cbe:	4401      	add	r1, r0
 8004cc0:	1850      	adds	r0, r2, r1
 8004cc2:	4283      	cmp	r3, r0
 8004cc4:	6011      	str	r1, [r2, #0]
 8004cc6:	d1e0      	bne.n	8004c8a <_free_r+0x22>
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	6053      	str	r3, [r2, #4]
 8004cce:	4408      	add	r0, r1
 8004cd0:	6010      	str	r0, [r2, #0]
 8004cd2:	e7da      	b.n	8004c8a <_free_r+0x22>
 8004cd4:	d902      	bls.n	8004cdc <_free_r+0x74>
 8004cd6:	230c      	movs	r3, #12
 8004cd8:	602b      	str	r3, [r5, #0]
 8004cda:	e7d6      	b.n	8004c8a <_free_r+0x22>
 8004cdc:	6820      	ldr	r0, [r4, #0]
 8004cde:	1821      	adds	r1, r4, r0
 8004ce0:	428b      	cmp	r3, r1
 8004ce2:	bf04      	itt	eq
 8004ce4:	6819      	ldreq	r1, [r3, #0]
 8004ce6:	685b      	ldreq	r3, [r3, #4]
 8004ce8:	6063      	str	r3, [r4, #4]
 8004cea:	bf04      	itt	eq
 8004cec:	1809      	addeq	r1, r1, r0
 8004cee:	6021      	streq	r1, [r4, #0]
 8004cf0:	6054      	str	r4, [r2, #4]
 8004cf2:	e7ca      	b.n	8004c8a <_free_r+0x22>
 8004cf4:	bd38      	pop	{r3, r4, r5, pc}
 8004cf6:	bf00      	nop
 8004cf8:	200002c4 	.word	0x200002c4

08004cfc <sbrk_aligned>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	4e0f      	ldr	r6, [pc, #60]	@ (8004d3c <sbrk_aligned+0x40>)
 8004d00:	460c      	mov	r4, r1
 8004d02:	6831      	ldr	r1, [r6, #0]
 8004d04:	4605      	mov	r5, r0
 8004d06:	b911      	cbnz	r1, 8004d0e <sbrk_aligned+0x12>
 8004d08:	f000 fba6 	bl	8005458 <_sbrk_r>
 8004d0c:	6030      	str	r0, [r6, #0]
 8004d0e:	4621      	mov	r1, r4
 8004d10:	4628      	mov	r0, r5
 8004d12:	f000 fba1 	bl	8005458 <_sbrk_r>
 8004d16:	1c43      	adds	r3, r0, #1
 8004d18:	d103      	bne.n	8004d22 <sbrk_aligned+0x26>
 8004d1a:	f04f 34ff 	mov.w	r4, #4294967295
 8004d1e:	4620      	mov	r0, r4
 8004d20:	bd70      	pop	{r4, r5, r6, pc}
 8004d22:	1cc4      	adds	r4, r0, #3
 8004d24:	f024 0403 	bic.w	r4, r4, #3
 8004d28:	42a0      	cmp	r0, r4
 8004d2a:	d0f8      	beq.n	8004d1e <sbrk_aligned+0x22>
 8004d2c:	1a21      	subs	r1, r4, r0
 8004d2e:	4628      	mov	r0, r5
 8004d30:	f000 fb92 	bl	8005458 <_sbrk_r>
 8004d34:	3001      	adds	r0, #1
 8004d36:	d1f2      	bne.n	8004d1e <sbrk_aligned+0x22>
 8004d38:	e7ef      	b.n	8004d1a <sbrk_aligned+0x1e>
 8004d3a:	bf00      	nop
 8004d3c:	200002c0 	.word	0x200002c0

08004d40 <_malloc_r>:
 8004d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d44:	1ccd      	adds	r5, r1, #3
 8004d46:	f025 0503 	bic.w	r5, r5, #3
 8004d4a:	3508      	adds	r5, #8
 8004d4c:	2d0c      	cmp	r5, #12
 8004d4e:	bf38      	it	cc
 8004d50:	250c      	movcc	r5, #12
 8004d52:	2d00      	cmp	r5, #0
 8004d54:	4606      	mov	r6, r0
 8004d56:	db01      	blt.n	8004d5c <_malloc_r+0x1c>
 8004d58:	42a9      	cmp	r1, r5
 8004d5a:	d904      	bls.n	8004d66 <_malloc_r+0x26>
 8004d5c:	230c      	movs	r3, #12
 8004d5e:	6033      	str	r3, [r6, #0]
 8004d60:	2000      	movs	r0, #0
 8004d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e3c <_malloc_r+0xfc>
 8004d6a:	f000 f869 	bl	8004e40 <__malloc_lock>
 8004d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d72:	461c      	mov	r4, r3
 8004d74:	bb44      	cbnz	r4, 8004dc8 <_malloc_r+0x88>
 8004d76:	4629      	mov	r1, r5
 8004d78:	4630      	mov	r0, r6
 8004d7a:	f7ff ffbf 	bl	8004cfc <sbrk_aligned>
 8004d7e:	1c43      	adds	r3, r0, #1
 8004d80:	4604      	mov	r4, r0
 8004d82:	d158      	bne.n	8004e36 <_malloc_r+0xf6>
 8004d84:	f8d8 4000 	ldr.w	r4, [r8]
 8004d88:	4627      	mov	r7, r4
 8004d8a:	2f00      	cmp	r7, #0
 8004d8c:	d143      	bne.n	8004e16 <_malloc_r+0xd6>
 8004d8e:	2c00      	cmp	r4, #0
 8004d90:	d04b      	beq.n	8004e2a <_malloc_r+0xea>
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	4639      	mov	r1, r7
 8004d96:	4630      	mov	r0, r6
 8004d98:	eb04 0903 	add.w	r9, r4, r3
 8004d9c:	f000 fb5c 	bl	8005458 <_sbrk_r>
 8004da0:	4581      	cmp	r9, r0
 8004da2:	d142      	bne.n	8004e2a <_malloc_r+0xea>
 8004da4:	6821      	ldr	r1, [r4, #0]
 8004da6:	1a6d      	subs	r5, r5, r1
 8004da8:	4629      	mov	r1, r5
 8004daa:	4630      	mov	r0, r6
 8004dac:	f7ff ffa6 	bl	8004cfc <sbrk_aligned>
 8004db0:	3001      	adds	r0, #1
 8004db2:	d03a      	beq.n	8004e2a <_malloc_r+0xea>
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	442b      	add	r3, r5
 8004db8:	6023      	str	r3, [r4, #0]
 8004dba:	f8d8 3000 	ldr.w	r3, [r8]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	bb62      	cbnz	r2, 8004e1c <_malloc_r+0xdc>
 8004dc2:	f8c8 7000 	str.w	r7, [r8]
 8004dc6:	e00f      	b.n	8004de8 <_malloc_r+0xa8>
 8004dc8:	6822      	ldr	r2, [r4, #0]
 8004dca:	1b52      	subs	r2, r2, r5
 8004dcc:	d420      	bmi.n	8004e10 <_malloc_r+0xd0>
 8004dce:	2a0b      	cmp	r2, #11
 8004dd0:	d917      	bls.n	8004e02 <_malloc_r+0xc2>
 8004dd2:	1961      	adds	r1, r4, r5
 8004dd4:	42a3      	cmp	r3, r4
 8004dd6:	6025      	str	r5, [r4, #0]
 8004dd8:	bf18      	it	ne
 8004dda:	6059      	strne	r1, [r3, #4]
 8004ddc:	6863      	ldr	r3, [r4, #4]
 8004dde:	bf08      	it	eq
 8004de0:	f8c8 1000 	streq.w	r1, [r8]
 8004de4:	5162      	str	r2, [r4, r5]
 8004de6:	604b      	str	r3, [r1, #4]
 8004de8:	4630      	mov	r0, r6
 8004dea:	f000 f82f 	bl	8004e4c <__malloc_unlock>
 8004dee:	f104 000b 	add.w	r0, r4, #11
 8004df2:	1d23      	adds	r3, r4, #4
 8004df4:	f020 0007 	bic.w	r0, r0, #7
 8004df8:	1ac2      	subs	r2, r0, r3
 8004dfa:	bf1c      	itt	ne
 8004dfc:	1a1b      	subne	r3, r3, r0
 8004dfe:	50a3      	strne	r3, [r4, r2]
 8004e00:	e7af      	b.n	8004d62 <_malloc_r+0x22>
 8004e02:	6862      	ldr	r2, [r4, #4]
 8004e04:	42a3      	cmp	r3, r4
 8004e06:	bf0c      	ite	eq
 8004e08:	f8c8 2000 	streq.w	r2, [r8]
 8004e0c:	605a      	strne	r2, [r3, #4]
 8004e0e:	e7eb      	b.n	8004de8 <_malloc_r+0xa8>
 8004e10:	4623      	mov	r3, r4
 8004e12:	6864      	ldr	r4, [r4, #4]
 8004e14:	e7ae      	b.n	8004d74 <_malloc_r+0x34>
 8004e16:	463c      	mov	r4, r7
 8004e18:	687f      	ldr	r7, [r7, #4]
 8004e1a:	e7b6      	b.n	8004d8a <_malloc_r+0x4a>
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	42a3      	cmp	r3, r4
 8004e22:	d1fb      	bne.n	8004e1c <_malloc_r+0xdc>
 8004e24:	2300      	movs	r3, #0
 8004e26:	6053      	str	r3, [r2, #4]
 8004e28:	e7de      	b.n	8004de8 <_malloc_r+0xa8>
 8004e2a:	230c      	movs	r3, #12
 8004e2c:	6033      	str	r3, [r6, #0]
 8004e2e:	4630      	mov	r0, r6
 8004e30:	f000 f80c 	bl	8004e4c <__malloc_unlock>
 8004e34:	e794      	b.n	8004d60 <_malloc_r+0x20>
 8004e36:	6005      	str	r5, [r0, #0]
 8004e38:	e7d6      	b.n	8004de8 <_malloc_r+0xa8>
 8004e3a:	bf00      	nop
 8004e3c:	200002c4 	.word	0x200002c4

08004e40 <__malloc_lock>:
 8004e40:	4801      	ldr	r0, [pc, #4]	@ (8004e48 <__malloc_lock+0x8>)
 8004e42:	f7ff bf0f 	b.w	8004c64 <__retarget_lock_acquire_recursive>
 8004e46:	bf00      	nop
 8004e48:	200002bc 	.word	0x200002bc

08004e4c <__malloc_unlock>:
 8004e4c:	4801      	ldr	r0, [pc, #4]	@ (8004e54 <__malloc_unlock+0x8>)
 8004e4e:	f7ff bf0a 	b.w	8004c66 <__retarget_lock_release_recursive>
 8004e52:	bf00      	nop
 8004e54:	200002bc 	.word	0x200002bc

08004e58 <__ssputs_r>:
 8004e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e5c:	688e      	ldr	r6, [r1, #8]
 8004e5e:	461f      	mov	r7, r3
 8004e60:	42be      	cmp	r6, r7
 8004e62:	680b      	ldr	r3, [r1, #0]
 8004e64:	4682      	mov	sl, r0
 8004e66:	460c      	mov	r4, r1
 8004e68:	4690      	mov	r8, r2
 8004e6a:	d82d      	bhi.n	8004ec8 <__ssputs_r+0x70>
 8004e6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e74:	d026      	beq.n	8004ec4 <__ssputs_r+0x6c>
 8004e76:	6965      	ldr	r5, [r4, #20]
 8004e78:	6909      	ldr	r1, [r1, #16]
 8004e7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e7e:	eba3 0901 	sub.w	r9, r3, r1
 8004e82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e86:	1c7b      	adds	r3, r7, #1
 8004e88:	444b      	add	r3, r9
 8004e8a:	106d      	asrs	r5, r5, #1
 8004e8c:	429d      	cmp	r5, r3
 8004e8e:	bf38      	it	cc
 8004e90:	461d      	movcc	r5, r3
 8004e92:	0553      	lsls	r3, r2, #21
 8004e94:	d527      	bpl.n	8004ee6 <__ssputs_r+0x8e>
 8004e96:	4629      	mov	r1, r5
 8004e98:	f7ff ff52 	bl	8004d40 <_malloc_r>
 8004e9c:	4606      	mov	r6, r0
 8004e9e:	b360      	cbz	r0, 8004efa <__ssputs_r+0xa2>
 8004ea0:	6921      	ldr	r1, [r4, #16]
 8004ea2:	464a      	mov	r2, r9
 8004ea4:	f000 fae8 	bl	8005478 <memcpy>
 8004ea8:	89a3      	ldrh	r3, [r4, #12]
 8004eaa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eb2:	81a3      	strh	r3, [r4, #12]
 8004eb4:	6126      	str	r6, [r4, #16]
 8004eb6:	6165      	str	r5, [r4, #20]
 8004eb8:	444e      	add	r6, r9
 8004eba:	eba5 0509 	sub.w	r5, r5, r9
 8004ebe:	6026      	str	r6, [r4, #0]
 8004ec0:	60a5      	str	r5, [r4, #8]
 8004ec2:	463e      	mov	r6, r7
 8004ec4:	42be      	cmp	r6, r7
 8004ec6:	d900      	bls.n	8004eca <__ssputs_r+0x72>
 8004ec8:	463e      	mov	r6, r7
 8004eca:	6820      	ldr	r0, [r4, #0]
 8004ecc:	4632      	mov	r2, r6
 8004ece:	4641      	mov	r1, r8
 8004ed0:	f000 faa8 	bl	8005424 <memmove>
 8004ed4:	68a3      	ldr	r3, [r4, #8]
 8004ed6:	1b9b      	subs	r3, r3, r6
 8004ed8:	60a3      	str	r3, [r4, #8]
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	4433      	add	r3, r6
 8004ede:	6023      	str	r3, [r4, #0]
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ee6:	462a      	mov	r2, r5
 8004ee8:	f000 fad4 	bl	8005494 <_realloc_r>
 8004eec:	4606      	mov	r6, r0
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d1e0      	bne.n	8004eb4 <__ssputs_r+0x5c>
 8004ef2:	6921      	ldr	r1, [r4, #16]
 8004ef4:	4650      	mov	r0, sl
 8004ef6:	f7ff feb7 	bl	8004c68 <_free_r>
 8004efa:	230c      	movs	r3, #12
 8004efc:	f8ca 3000 	str.w	r3, [sl]
 8004f00:	89a3      	ldrh	r3, [r4, #12]
 8004f02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f06:	81a3      	strh	r3, [r4, #12]
 8004f08:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0c:	e7e9      	b.n	8004ee2 <__ssputs_r+0x8a>
	...

08004f10 <_svfiprintf_r>:
 8004f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f14:	4698      	mov	r8, r3
 8004f16:	898b      	ldrh	r3, [r1, #12]
 8004f18:	061b      	lsls	r3, r3, #24
 8004f1a:	b09d      	sub	sp, #116	@ 0x74
 8004f1c:	4607      	mov	r7, r0
 8004f1e:	460d      	mov	r5, r1
 8004f20:	4614      	mov	r4, r2
 8004f22:	d510      	bpl.n	8004f46 <_svfiprintf_r+0x36>
 8004f24:	690b      	ldr	r3, [r1, #16]
 8004f26:	b973      	cbnz	r3, 8004f46 <_svfiprintf_r+0x36>
 8004f28:	2140      	movs	r1, #64	@ 0x40
 8004f2a:	f7ff ff09 	bl	8004d40 <_malloc_r>
 8004f2e:	6028      	str	r0, [r5, #0]
 8004f30:	6128      	str	r0, [r5, #16]
 8004f32:	b930      	cbnz	r0, 8004f42 <_svfiprintf_r+0x32>
 8004f34:	230c      	movs	r3, #12
 8004f36:	603b      	str	r3, [r7, #0]
 8004f38:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3c:	b01d      	add	sp, #116	@ 0x74
 8004f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f42:	2340      	movs	r3, #64	@ 0x40
 8004f44:	616b      	str	r3, [r5, #20]
 8004f46:	2300      	movs	r3, #0
 8004f48:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f4a:	2320      	movs	r3, #32
 8004f4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f50:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f54:	2330      	movs	r3, #48	@ 0x30
 8004f56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80050f4 <_svfiprintf_r+0x1e4>
 8004f5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f5e:	f04f 0901 	mov.w	r9, #1
 8004f62:	4623      	mov	r3, r4
 8004f64:	469a      	mov	sl, r3
 8004f66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f6a:	b10a      	cbz	r2, 8004f70 <_svfiprintf_r+0x60>
 8004f6c:	2a25      	cmp	r2, #37	@ 0x25
 8004f6e:	d1f9      	bne.n	8004f64 <_svfiprintf_r+0x54>
 8004f70:	ebba 0b04 	subs.w	fp, sl, r4
 8004f74:	d00b      	beq.n	8004f8e <_svfiprintf_r+0x7e>
 8004f76:	465b      	mov	r3, fp
 8004f78:	4622      	mov	r2, r4
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	4638      	mov	r0, r7
 8004f7e:	f7ff ff6b 	bl	8004e58 <__ssputs_r>
 8004f82:	3001      	adds	r0, #1
 8004f84:	f000 80a7 	beq.w	80050d6 <_svfiprintf_r+0x1c6>
 8004f88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f8a:	445a      	add	r2, fp
 8004f8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 809f 	beq.w	80050d6 <_svfiprintf_r+0x1c6>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fa2:	f10a 0a01 	add.w	sl, sl, #1
 8004fa6:	9304      	str	r3, [sp, #16]
 8004fa8:	9307      	str	r3, [sp, #28]
 8004faa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fae:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fb0:	4654      	mov	r4, sl
 8004fb2:	2205      	movs	r2, #5
 8004fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb8:	484e      	ldr	r0, [pc, #312]	@ (80050f4 <_svfiprintf_r+0x1e4>)
 8004fba:	f7fb f929 	bl	8000210 <memchr>
 8004fbe:	9a04      	ldr	r2, [sp, #16]
 8004fc0:	b9d8      	cbnz	r0, 8004ffa <_svfiprintf_r+0xea>
 8004fc2:	06d0      	lsls	r0, r2, #27
 8004fc4:	bf44      	itt	mi
 8004fc6:	2320      	movmi	r3, #32
 8004fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fcc:	0711      	lsls	r1, r2, #28
 8004fce:	bf44      	itt	mi
 8004fd0:	232b      	movmi	r3, #43	@ 0x2b
 8004fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8004fda:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fdc:	d015      	beq.n	800500a <_svfiprintf_r+0xfa>
 8004fde:	9a07      	ldr	r2, [sp, #28]
 8004fe0:	4654      	mov	r4, sl
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	f04f 0c0a 	mov.w	ip, #10
 8004fe8:	4621      	mov	r1, r4
 8004fea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fee:	3b30      	subs	r3, #48	@ 0x30
 8004ff0:	2b09      	cmp	r3, #9
 8004ff2:	d94b      	bls.n	800508c <_svfiprintf_r+0x17c>
 8004ff4:	b1b0      	cbz	r0, 8005024 <_svfiprintf_r+0x114>
 8004ff6:	9207      	str	r2, [sp, #28]
 8004ff8:	e014      	b.n	8005024 <_svfiprintf_r+0x114>
 8004ffa:	eba0 0308 	sub.w	r3, r0, r8
 8004ffe:	fa09 f303 	lsl.w	r3, r9, r3
 8005002:	4313      	orrs	r3, r2
 8005004:	9304      	str	r3, [sp, #16]
 8005006:	46a2      	mov	sl, r4
 8005008:	e7d2      	b.n	8004fb0 <_svfiprintf_r+0xa0>
 800500a:	9b03      	ldr	r3, [sp, #12]
 800500c:	1d19      	adds	r1, r3, #4
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	9103      	str	r1, [sp, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	bfbb      	ittet	lt
 8005016:	425b      	neglt	r3, r3
 8005018:	f042 0202 	orrlt.w	r2, r2, #2
 800501c:	9307      	strge	r3, [sp, #28]
 800501e:	9307      	strlt	r3, [sp, #28]
 8005020:	bfb8      	it	lt
 8005022:	9204      	strlt	r2, [sp, #16]
 8005024:	7823      	ldrb	r3, [r4, #0]
 8005026:	2b2e      	cmp	r3, #46	@ 0x2e
 8005028:	d10a      	bne.n	8005040 <_svfiprintf_r+0x130>
 800502a:	7863      	ldrb	r3, [r4, #1]
 800502c:	2b2a      	cmp	r3, #42	@ 0x2a
 800502e:	d132      	bne.n	8005096 <_svfiprintf_r+0x186>
 8005030:	9b03      	ldr	r3, [sp, #12]
 8005032:	1d1a      	adds	r2, r3, #4
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	9203      	str	r2, [sp, #12]
 8005038:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800503c:	3402      	adds	r4, #2
 800503e:	9305      	str	r3, [sp, #20]
 8005040:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005104 <_svfiprintf_r+0x1f4>
 8005044:	7821      	ldrb	r1, [r4, #0]
 8005046:	2203      	movs	r2, #3
 8005048:	4650      	mov	r0, sl
 800504a:	f7fb f8e1 	bl	8000210 <memchr>
 800504e:	b138      	cbz	r0, 8005060 <_svfiprintf_r+0x150>
 8005050:	9b04      	ldr	r3, [sp, #16]
 8005052:	eba0 000a 	sub.w	r0, r0, sl
 8005056:	2240      	movs	r2, #64	@ 0x40
 8005058:	4082      	lsls	r2, r0
 800505a:	4313      	orrs	r3, r2
 800505c:	3401      	adds	r4, #1
 800505e:	9304      	str	r3, [sp, #16]
 8005060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005064:	4824      	ldr	r0, [pc, #144]	@ (80050f8 <_svfiprintf_r+0x1e8>)
 8005066:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800506a:	2206      	movs	r2, #6
 800506c:	f7fb f8d0 	bl	8000210 <memchr>
 8005070:	2800      	cmp	r0, #0
 8005072:	d036      	beq.n	80050e2 <_svfiprintf_r+0x1d2>
 8005074:	4b21      	ldr	r3, [pc, #132]	@ (80050fc <_svfiprintf_r+0x1ec>)
 8005076:	bb1b      	cbnz	r3, 80050c0 <_svfiprintf_r+0x1b0>
 8005078:	9b03      	ldr	r3, [sp, #12]
 800507a:	3307      	adds	r3, #7
 800507c:	f023 0307 	bic.w	r3, r3, #7
 8005080:	3308      	adds	r3, #8
 8005082:	9303      	str	r3, [sp, #12]
 8005084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005086:	4433      	add	r3, r6
 8005088:	9309      	str	r3, [sp, #36]	@ 0x24
 800508a:	e76a      	b.n	8004f62 <_svfiprintf_r+0x52>
 800508c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005090:	460c      	mov	r4, r1
 8005092:	2001      	movs	r0, #1
 8005094:	e7a8      	b.n	8004fe8 <_svfiprintf_r+0xd8>
 8005096:	2300      	movs	r3, #0
 8005098:	3401      	adds	r4, #1
 800509a:	9305      	str	r3, [sp, #20]
 800509c:	4619      	mov	r1, r3
 800509e:	f04f 0c0a 	mov.w	ip, #10
 80050a2:	4620      	mov	r0, r4
 80050a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050a8:	3a30      	subs	r2, #48	@ 0x30
 80050aa:	2a09      	cmp	r2, #9
 80050ac:	d903      	bls.n	80050b6 <_svfiprintf_r+0x1a6>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0c6      	beq.n	8005040 <_svfiprintf_r+0x130>
 80050b2:	9105      	str	r1, [sp, #20]
 80050b4:	e7c4      	b.n	8005040 <_svfiprintf_r+0x130>
 80050b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80050ba:	4604      	mov	r4, r0
 80050bc:	2301      	movs	r3, #1
 80050be:	e7f0      	b.n	80050a2 <_svfiprintf_r+0x192>
 80050c0:	ab03      	add	r3, sp, #12
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	462a      	mov	r2, r5
 80050c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005100 <_svfiprintf_r+0x1f0>)
 80050c8:	a904      	add	r1, sp, #16
 80050ca:	4638      	mov	r0, r7
 80050cc:	f3af 8000 	nop.w
 80050d0:	1c42      	adds	r2, r0, #1
 80050d2:	4606      	mov	r6, r0
 80050d4:	d1d6      	bne.n	8005084 <_svfiprintf_r+0x174>
 80050d6:	89ab      	ldrh	r3, [r5, #12]
 80050d8:	065b      	lsls	r3, r3, #25
 80050da:	f53f af2d 	bmi.w	8004f38 <_svfiprintf_r+0x28>
 80050de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050e0:	e72c      	b.n	8004f3c <_svfiprintf_r+0x2c>
 80050e2:	ab03      	add	r3, sp, #12
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	462a      	mov	r2, r5
 80050e8:	4b05      	ldr	r3, [pc, #20]	@ (8005100 <_svfiprintf_r+0x1f0>)
 80050ea:	a904      	add	r1, sp, #16
 80050ec:	4638      	mov	r0, r7
 80050ee:	f000 f879 	bl	80051e4 <_printf_i>
 80050f2:	e7ed      	b.n	80050d0 <_svfiprintf_r+0x1c0>
 80050f4:	0800554c 	.word	0x0800554c
 80050f8:	08005556 	.word	0x08005556
 80050fc:	00000000 	.word	0x00000000
 8005100:	08004e59 	.word	0x08004e59
 8005104:	08005552 	.word	0x08005552

08005108 <_printf_common>:
 8005108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800510c:	4616      	mov	r6, r2
 800510e:	4698      	mov	r8, r3
 8005110:	688a      	ldr	r2, [r1, #8]
 8005112:	690b      	ldr	r3, [r1, #16]
 8005114:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005118:	4293      	cmp	r3, r2
 800511a:	bfb8      	it	lt
 800511c:	4613      	movlt	r3, r2
 800511e:	6033      	str	r3, [r6, #0]
 8005120:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005124:	4607      	mov	r7, r0
 8005126:	460c      	mov	r4, r1
 8005128:	b10a      	cbz	r2, 800512e <_printf_common+0x26>
 800512a:	3301      	adds	r3, #1
 800512c:	6033      	str	r3, [r6, #0]
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	0699      	lsls	r1, r3, #26
 8005132:	bf42      	ittt	mi
 8005134:	6833      	ldrmi	r3, [r6, #0]
 8005136:	3302      	addmi	r3, #2
 8005138:	6033      	strmi	r3, [r6, #0]
 800513a:	6825      	ldr	r5, [r4, #0]
 800513c:	f015 0506 	ands.w	r5, r5, #6
 8005140:	d106      	bne.n	8005150 <_printf_common+0x48>
 8005142:	f104 0a19 	add.w	sl, r4, #25
 8005146:	68e3      	ldr	r3, [r4, #12]
 8005148:	6832      	ldr	r2, [r6, #0]
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	42ab      	cmp	r3, r5
 800514e:	dc26      	bgt.n	800519e <_printf_common+0x96>
 8005150:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005154:	6822      	ldr	r2, [r4, #0]
 8005156:	3b00      	subs	r3, #0
 8005158:	bf18      	it	ne
 800515a:	2301      	movne	r3, #1
 800515c:	0692      	lsls	r2, r2, #26
 800515e:	d42b      	bmi.n	80051b8 <_printf_common+0xb0>
 8005160:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005164:	4641      	mov	r1, r8
 8005166:	4638      	mov	r0, r7
 8005168:	47c8      	blx	r9
 800516a:	3001      	adds	r0, #1
 800516c:	d01e      	beq.n	80051ac <_printf_common+0xa4>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	6922      	ldr	r2, [r4, #16]
 8005172:	f003 0306 	and.w	r3, r3, #6
 8005176:	2b04      	cmp	r3, #4
 8005178:	bf02      	ittt	eq
 800517a:	68e5      	ldreq	r5, [r4, #12]
 800517c:	6833      	ldreq	r3, [r6, #0]
 800517e:	1aed      	subeq	r5, r5, r3
 8005180:	68a3      	ldr	r3, [r4, #8]
 8005182:	bf0c      	ite	eq
 8005184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005188:	2500      	movne	r5, #0
 800518a:	4293      	cmp	r3, r2
 800518c:	bfc4      	itt	gt
 800518e:	1a9b      	subgt	r3, r3, r2
 8005190:	18ed      	addgt	r5, r5, r3
 8005192:	2600      	movs	r6, #0
 8005194:	341a      	adds	r4, #26
 8005196:	42b5      	cmp	r5, r6
 8005198:	d11a      	bne.n	80051d0 <_printf_common+0xc8>
 800519a:	2000      	movs	r0, #0
 800519c:	e008      	b.n	80051b0 <_printf_common+0xa8>
 800519e:	2301      	movs	r3, #1
 80051a0:	4652      	mov	r2, sl
 80051a2:	4641      	mov	r1, r8
 80051a4:	4638      	mov	r0, r7
 80051a6:	47c8      	blx	r9
 80051a8:	3001      	adds	r0, #1
 80051aa:	d103      	bne.n	80051b4 <_printf_common+0xac>
 80051ac:	f04f 30ff 	mov.w	r0, #4294967295
 80051b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b4:	3501      	adds	r5, #1
 80051b6:	e7c6      	b.n	8005146 <_printf_common+0x3e>
 80051b8:	18e1      	adds	r1, r4, r3
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	2030      	movs	r0, #48	@ 0x30
 80051be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051c2:	4422      	add	r2, r4
 80051c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051cc:	3302      	adds	r3, #2
 80051ce:	e7c7      	b.n	8005160 <_printf_common+0x58>
 80051d0:	2301      	movs	r3, #1
 80051d2:	4622      	mov	r2, r4
 80051d4:	4641      	mov	r1, r8
 80051d6:	4638      	mov	r0, r7
 80051d8:	47c8      	blx	r9
 80051da:	3001      	adds	r0, #1
 80051dc:	d0e6      	beq.n	80051ac <_printf_common+0xa4>
 80051de:	3601      	adds	r6, #1
 80051e0:	e7d9      	b.n	8005196 <_printf_common+0x8e>
	...

080051e4 <_printf_i>:
 80051e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051e8:	7e0f      	ldrb	r7, [r1, #24]
 80051ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051ec:	2f78      	cmp	r7, #120	@ 0x78
 80051ee:	4691      	mov	r9, r2
 80051f0:	4680      	mov	r8, r0
 80051f2:	460c      	mov	r4, r1
 80051f4:	469a      	mov	sl, r3
 80051f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051fa:	d807      	bhi.n	800520c <_printf_i+0x28>
 80051fc:	2f62      	cmp	r7, #98	@ 0x62
 80051fe:	d80a      	bhi.n	8005216 <_printf_i+0x32>
 8005200:	2f00      	cmp	r7, #0
 8005202:	f000 80d2 	beq.w	80053aa <_printf_i+0x1c6>
 8005206:	2f58      	cmp	r7, #88	@ 0x58
 8005208:	f000 80b9 	beq.w	800537e <_printf_i+0x19a>
 800520c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005210:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005214:	e03a      	b.n	800528c <_printf_i+0xa8>
 8005216:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800521a:	2b15      	cmp	r3, #21
 800521c:	d8f6      	bhi.n	800520c <_printf_i+0x28>
 800521e:	a101      	add	r1, pc, #4	@ (adr r1, 8005224 <_printf_i+0x40>)
 8005220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005224:	0800527d 	.word	0x0800527d
 8005228:	08005291 	.word	0x08005291
 800522c:	0800520d 	.word	0x0800520d
 8005230:	0800520d 	.word	0x0800520d
 8005234:	0800520d 	.word	0x0800520d
 8005238:	0800520d 	.word	0x0800520d
 800523c:	08005291 	.word	0x08005291
 8005240:	0800520d 	.word	0x0800520d
 8005244:	0800520d 	.word	0x0800520d
 8005248:	0800520d 	.word	0x0800520d
 800524c:	0800520d 	.word	0x0800520d
 8005250:	08005391 	.word	0x08005391
 8005254:	080052bb 	.word	0x080052bb
 8005258:	0800534b 	.word	0x0800534b
 800525c:	0800520d 	.word	0x0800520d
 8005260:	0800520d 	.word	0x0800520d
 8005264:	080053b3 	.word	0x080053b3
 8005268:	0800520d 	.word	0x0800520d
 800526c:	080052bb 	.word	0x080052bb
 8005270:	0800520d 	.word	0x0800520d
 8005274:	0800520d 	.word	0x0800520d
 8005278:	08005353 	.word	0x08005353
 800527c:	6833      	ldr	r3, [r6, #0]
 800527e:	1d1a      	adds	r2, r3, #4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6032      	str	r2, [r6, #0]
 8005284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005288:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800528c:	2301      	movs	r3, #1
 800528e:	e09d      	b.n	80053cc <_printf_i+0x1e8>
 8005290:	6833      	ldr	r3, [r6, #0]
 8005292:	6820      	ldr	r0, [r4, #0]
 8005294:	1d19      	adds	r1, r3, #4
 8005296:	6031      	str	r1, [r6, #0]
 8005298:	0606      	lsls	r6, r0, #24
 800529a:	d501      	bpl.n	80052a0 <_printf_i+0xbc>
 800529c:	681d      	ldr	r5, [r3, #0]
 800529e:	e003      	b.n	80052a8 <_printf_i+0xc4>
 80052a0:	0645      	lsls	r5, r0, #25
 80052a2:	d5fb      	bpl.n	800529c <_printf_i+0xb8>
 80052a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052a8:	2d00      	cmp	r5, #0
 80052aa:	da03      	bge.n	80052b4 <_printf_i+0xd0>
 80052ac:	232d      	movs	r3, #45	@ 0x2d
 80052ae:	426d      	negs	r5, r5
 80052b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052b4:	4859      	ldr	r0, [pc, #356]	@ (800541c <_printf_i+0x238>)
 80052b6:	230a      	movs	r3, #10
 80052b8:	e011      	b.n	80052de <_printf_i+0xfa>
 80052ba:	6821      	ldr	r1, [r4, #0]
 80052bc:	6833      	ldr	r3, [r6, #0]
 80052be:	0608      	lsls	r0, r1, #24
 80052c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80052c4:	d402      	bmi.n	80052cc <_printf_i+0xe8>
 80052c6:	0649      	lsls	r1, r1, #25
 80052c8:	bf48      	it	mi
 80052ca:	b2ad      	uxthmi	r5, r5
 80052cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80052ce:	4853      	ldr	r0, [pc, #332]	@ (800541c <_printf_i+0x238>)
 80052d0:	6033      	str	r3, [r6, #0]
 80052d2:	bf14      	ite	ne
 80052d4:	230a      	movne	r3, #10
 80052d6:	2308      	moveq	r3, #8
 80052d8:	2100      	movs	r1, #0
 80052da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052de:	6866      	ldr	r6, [r4, #4]
 80052e0:	60a6      	str	r6, [r4, #8]
 80052e2:	2e00      	cmp	r6, #0
 80052e4:	bfa2      	ittt	ge
 80052e6:	6821      	ldrge	r1, [r4, #0]
 80052e8:	f021 0104 	bicge.w	r1, r1, #4
 80052ec:	6021      	strge	r1, [r4, #0]
 80052ee:	b90d      	cbnz	r5, 80052f4 <_printf_i+0x110>
 80052f0:	2e00      	cmp	r6, #0
 80052f2:	d04b      	beq.n	800538c <_printf_i+0x1a8>
 80052f4:	4616      	mov	r6, r2
 80052f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80052fa:	fb03 5711 	mls	r7, r3, r1, r5
 80052fe:	5dc7      	ldrb	r7, [r0, r7]
 8005300:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005304:	462f      	mov	r7, r5
 8005306:	42bb      	cmp	r3, r7
 8005308:	460d      	mov	r5, r1
 800530a:	d9f4      	bls.n	80052f6 <_printf_i+0x112>
 800530c:	2b08      	cmp	r3, #8
 800530e:	d10b      	bne.n	8005328 <_printf_i+0x144>
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	07df      	lsls	r7, r3, #31
 8005314:	d508      	bpl.n	8005328 <_printf_i+0x144>
 8005316:	6923      	ldr	r3, [r4, #16]
 8005318:	6861      	ldr	r1, [r4, #4]
 800531a:	4299      	cmp	r1, r3
 800531c:	bfde      	ittt	le
 800531e:	2330      	movle	r3, #48	@ 0x30
 8005320:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005324:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005328:	1b92      	subs	r2, r2, r6
 800532a:	6122      	str	r2, [r4, #16]
 800532c:	f8cd a000 	str.w	sl, [sp]
 8005330:	464b      	mov	r3, r9
 8005332:	aa03      	add	r2, sp, #12
 8005334:	4621      	mov	r1, r4
 8005336:	4640      	mov	r0, r8
 8005338:	f7ff fee6 	bl	8005108 <_printf_common>
 800533c:	3001      	adds	r0, #1
 800533e:	d14a      	bne.n	80053d6 <_printf_i+0x1f2>
 8005340:	f04f 30ff 	mov.w	r0, #4294967295
 8005344:	b004      	add	sp, #16
 8005346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	f043 0320 	orr.w	r3, r3, #32
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	4833      	ldr	r0, [pc, #204]	@ (8005420 <_printf_i+0x23c>)
 8005354:	2778      	movs	r7, #120	@ 0x78
 8005356:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	6831      	ldr	r1, [r6, #0]
 800535e:	061f      	lsls	r7, r3, #24
 8005360:	f851 5b04 	ldr.w	r5, [r1], #4
 8005364:	d402      	bmi.n	800536c <_printf_i+0x188>
 8005366:	065f      	lsls	r7, r3, #25
 8005368:	bf48      	it	mi
 800536a:	b2ad      	uxthmi	r5, r5
 800536c:	6031      	str	r1, [r6, #0]
 800536e:	07d9      	lsls	r1, r3, #31
 8005370:	bf44      	itt	mi
 8005372:	f043 0320 	orrmi.w	r3, r3, #32
 8005376:	6023      	strmi	r3, [r4, #0]
 8005378:	b11d      	cbz	r5, 8005382 <_printf_i+0x19e>
 800537a:	2310      	movs	r3, #16
 800537c:	e7ac      	b.n	80052d8 <_printf_i+0xf4>
 800537e:	4827      	ldr	r0, [pc, #156]	@ (800541c <_printf_i+0x238>)
 8005380:	e7e9      	b.n	8005356 <_printf_i+0x172>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	f023 0320 	bic.w	r3, r3, #32
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	e7f6      	b.n	800537a <_printf_i+0x196>
 800538c:	4616      	mov	r6, r2
 800538e:	e7bd      	b.n	800530c <_printf_i+0x128>
 8005390:	6833      	ldr	r3, [r6, #0]
 8005392:	6825      	ldr	r5, [r4, #0]
 8005394:	6961      	ldr	r1, [r4, #20]
 8005396:	1d18      	adds	r0, r3, #4
 8005398:	6030      	str	r0, [r6, #0]
 800539a:	062e      	lsls	r6, r5, #24
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	d501      	bpl.n	80053a4 <_printf_i+0x1c0>
 80053a0:	6019      	str	r1, [r3, #0]
 80053a2:	e002      	b.n	80053aa <_printf_i+0x1c6>
 80053a4:	0668      	lsls	r0, r5, #25
 80053a6:	d5fb      	bpl.n	80053a0 <_printf_i+0x1bc>
 80053a8:	8019      	strh	r1, [r3, #0]
 80053aa:	2300      	movs	r3, #0
 80053ac:	6123      	str	r3, [r4, #16]
 80053ae:	4616      	mov	r6, r2
 80053b0:	e7bc      	b.n	800532c <_printf_i+0x148>
 80053b2:	6833      	ldr	r3, [r6, #0]
 80053b4:	1d1a      	adds	r2, r3, #4
 80053b6:	6032      	str	r2, [r6, #0]
 80053b8:	681e      	ldr	r6, [r3, #0]
 80053ba:	6862      	ldr	r2, [r4, #4]
 80053bc:	2100      	movs	r1, #0
 80053be:	4630      	mov	r0, r6
 80053c0:	f7fa ff26 	bl	8000210 <memchr>
 80053c4:	b108      	cbz	r0, 80053ca <_printf_i+0x1e6>
 80053c6:	1b80      	subs	r0, r0, r6
 80053c8:	6060      	str	r0, [r4, #4]
 80053ca:	6863      	ldr	r3, [r4, #4]
 80053cc:	6123      	str	r3, [r4, #16]
 80053ce:	2300      	movs	r3, #0
 80053d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053d4:	e7aa      	b.n	800532c <_printf_i+0x148>
 80053d6:	6923      	ldr	r3, [r4, #16]
 80053d8:	4632      	mov	r2, r6
 80053da:	4649      	mov	r1, r9
 80053dc:	4640      	mov	r0, r8
 80053de:	47d0      	blx	sl
 80053e0:	3001      	adds	r0, #1
 80053e2:	d0ad      	beq.n	8005340 <_printf_i+0x15c>
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	079b      	lsls	r3, r3, #30
 80053e8:	d413      	bmi.n	8005412 <_printf_i+0x22e>
 80053ea:	68e0      	ldr	r0, [r4, #12]
 80053ec:	9b03      	ldr	r3, [sp, #12]
 80053ee:	4298      	cmp	r0, r3
 80053f0:	bfb8      	it	lt
 80053f2:	4618      	movlt	r0, r3
 80053f4:	e7a6      	b.n	8005344 <_printf_i+0x160>
 80053f6:	2301      	movs	r3, #1
 80053f8:	4632      	mov	r2, r6
 80053fa:	4649      	mov	r1, r9
 80053fc:	4640      	mov	r0, r8
 80053fe:	47d0      	blx	sl
 8005400:	3001      	adds	r0, #1
 8005402:	d09d      	beq.n	8005340 <_printf_i+0x15c>
 8005404:	3501      	adds	r5, #1
 8005406:	68e3      	ldr	r3, [r4, #12]
 8005408:	9903      	ldr	r1, [sp, #12]
 800540a:	1a5b      	subs	r3, r3, r1
 800540c:	42ab      	cmp	r3, r5
 800540e:	dcf2      	bgt.n	80053f6 <_printf_i+0x212>
 8005410:	e7eb      	b.n	80053ea <_printf_i+0x206>
 8005412:	2500      	movs	r5, #0
 8005414:	f104 0619 	add.w	r6, r4, #25
 8005418:	e7f5      	b.n	8005406 <_printf_i+0x222>
 800541a:	bf00      	nop
 800541c:	0800555d 	.word	0x0800555d
 8005420:	0800556e 	.word	0x0800556e

08005424 <memmove>:
 8005424:	4288      	cmp	r0, r1
 8005426:	b510      	push	{r4, lr}
 8005428:	eb01 0402 	add.w	r4, r1, r2
 800542c:	d902      	bls.n	8005434 <memmove+0x10>
 800542e:	4284      	cmp	r4, r0
 8005430:	4623      	mov	r3, r4
 8005432:	d807      	bhi.n	8005444 <memmove+0x20>
 8005434:	1e43      	subs	r3, r0, #1
 8005436:	42a1      	cmp	r1, r4
 8005438:	d008      	beq.n	800544c <memmove+0x28>
 800543a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800543e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005442:	e7f8      	b.n	8005436 <memmove+0x12>
 8005444:	4402      	add	r2, r0
 8005446:	4601      	mov	r1, r0
 8005448:	428a      	cmp	r2, r1
 800544a:	d100      	bne.n	800544e <memmove+0x2a>
 800544c:	bd10      	pop	{r4, pc}
 800544e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005456:	e7f7      	b.n	8005448 <memmove+0x24>

08005458 <_sbrk_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4d06      	ldr	r5, [pc, #24]	@ (8005474 <_sbrk_r+0x1c>)
 800545c:	2300      	movs	r3, #0
 800545e:	4604      	mov	r4, r0
 8005460:	4608      	mov	r0, r1
 8005462:	602b      	str	r3, [r5, #0]
 8005464:	f7fc f9f8 	bl	8001858 <_sbrk>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_sbrk_r+0x1a>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	b103      	cbz	r3, 8005472 <_sbrk_r+0x1a>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	200002b8 	.word	0x200002b8

08005478 <memcpy>:
 8005478:	440a      	add	r2, r1
 800547a:	4291      	cmp	r1, r2
 800547c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005480:	d100      	bne.n	8005484 <memcpy+0xc>
 8005482:	4770      	bx	lr
 8005484:	b510      	push	{r4, lr}
 8005486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800548a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800548e:	4291      	cmp	r1, r2
 8005490:	d1f9      	bne.n	8005486 <memcpy+0xe>
 8005492:	bd10      	pop	{r4, pc}

08005494 <_realloc_r>:
 8005494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005498:	4680      	mov	r8, r0
 800549a:	4615      	mov	r5, r2
 800549c:	460c      	mov	r4, r1
 800549e:	b921      	cbnz	r1, 80054aa <_realloc_r+0x16>
 80054a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054a4:	4611      	mov	r1, r2
 80054a6:	f7ff bc4b 	b.w	8004d40 <_malloc_r>
 80054aa:	b92a      	cbnz	r2, 80054b8 <_realloc_r+0x24>
 80054ac:	f7ff fbdc 	bl	8004c68 <_free_r>
 80054b0:	2400      	movs	r4, #0
 80054b2:	4620      	mov	r0, r4
 80054b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054b8:	f000 f81a 	bl	80054f0 <_malloc_usable_size_r>
 80054bc:	4285      	cmp	r5, r0
 80054be:	4606      	mov	r6, r0
 80054c0:	d802      	bhi.n	80054c8 <_realloc_r+0x34>
 80054c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80054c6:	d8f4      	bhi.n	80054b2 <_realloc_r+0x1e>
 80054c8:	4629      	mov	r1, r5
 80054ca:	4640      	mov	r0, r8
 80054cc:	f7ff fc38 	bl	8004d40 <_malloc_r>
 80054d0:	4607      	mov	r7, r0
 80054d2:	2800      	cmp	r0, #0
 80054d4:	d0ec      	beq.n	80054b0 <_realloc_r+0x1c>
 80054d6:	42b5      	cmp	r5, r6
 80054d8:	462a      	mov	r2, r5
 80054da:	4621      	mov	r1, r4
 80054dc:	bf28      	it	cs
 80054de:	4632      	movcs	r2, r6
 80054e0:	f7ff ffca 	bl	8005478 <memcpy>
 80054e4:	4621      	mov	r1, r4
 80054e6:	4640      	mov	r0, r8
 80054e8:	f7ff fbbe 	bl	8004c68 <_free_r>
 80054ec:	463c      	mov	r4, r7
 80054ee:	e7e0      	b.n	80054b2 <_realloc_r+0x1e>

080054f0 <_malloc_usable_size_r>:
 80054f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054f4:	1f18      	subs	r0, r3, #4
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	bfbc      	itt	lt
 80054fa:	580b      	ldrlt	r3, [r1, r0]
 80054fc:	18c0      	addlt	r0, r0, r3
 80054fe:	4770      	bx	lr

08005500 <_init>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	bf00      	nop
 8005504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005506:	bc08      	pop	{r3}
 8005508:	469e      	mov	lr, r3
 800550a:	4770      	bx	lr

0800550c <_fini>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	bf00      	nop
 8005510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005512:	bc08      	pop	{r3}
 8005514:	469e      	mov	lr, r3
 8005516:	4770      	bx	lr
